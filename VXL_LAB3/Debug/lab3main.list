
lab3main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000258c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e4  080026e4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080026e4  080026e4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e4  080026e4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e8  080026e8  000126e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080026ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000024  08002710  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002710  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b5d  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7b  00000000  00000000  00029baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017082  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6d9  00000000  00000000  00043ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008259c  00000000  00000000  0005037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000d296c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002680 	.word	0x08002680

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002680 	.word	0x08002680

0800014c <isButtonPressed>:
    	button_flag[i] = 0;
    	button_longPress_flag[i] = 0;
    }
}

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}

	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000084 	.word	0x20000084

08000180 <getKeyInput>:

	return 0;
}

// Get key input and debounce buttons
void getKeyInput() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a47      	ldr	r2, [pc, #284]	; (80002ac <getKeyInput+0x12c>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4946      	ldr	r1, [pc, #280]	; (80002b0 <getKeyInput+0x130>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a45      	ldr	r2, [pc, #276]	; (80002b4 <getKeyInput+0x134>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4941      	ldr	r1, [pc, #260]	; (80002ac <getKeyInput+0x12c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}

    // Get buttons input
    KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	483e      	ldr	r0, [pc, #248]	; (80002b8 <getKeyInput+0x138>)
 80001be:	f001 fa33 	bl	8001628 <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b3b      	ldr	r3, [pc, #236]	; (80002b4 <getKeyInput+0x134>)
 80001c8:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	483a      	ldr	r0, [pc, #232]	; (80002b8 <getKeyInput+0x138>)
 80001d0:	f001 fa2a 	bl	8001628 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b36      	ldr	r3, [pc, #216]	; (80002b4 <getKeyInput+0x134>)
 80001da:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4835      	ldr	r0, [pc, #212]	; (80002b8 <getKeyInput+0x138>)
 80001e2:	f001 fa21 	bl	8001628 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b32      	ldr	r3, [pc, #200]	; (80002b4 <getKeyInput+0x134>)
 80001ec:	609a      	str	r2, [r3, #8]

    for (int i = 0; i < 3; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e052      	b.n	800029a <getKeyInput+0x11a>
	    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) { // If no bouncing
 80001f4:	4a2d      	ldr	r2, [pc, #180]	; (80002ac <getKeyInput+0x12c>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	492d      	ldr	r1, [pc, #180]	; (80002b4 <getKeyInput+0x134>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d145      	bne.n	8000294 <getKeyInput+0x114>
 8000208:	4a28      	ldr	r2, [pc, #160]	; (80002ac <getKeyInput+0x12c>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4927      	ldr	r1, [pc, #156]	; (80002b0 <getKeyInput+0x130>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d13b      	bne.n	8000294 <getKeyInput+0x114>
	        if (KeyReg2[i] != KeyReg3[i]) {
 800021c:	4a24      	ldr	r2, [pc, #144]	; (80002b0 <getKeyInput+0x130>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4925      	ldr	r1, [pc, #148]	; (80002bc <getKeyInput+0x13c>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d018      	beq.n	8000262 <getKeyInput+0xe2>
	            KeyReg3[i] = KeyReg2[i];
 8000230:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <getKeyInput+0x130>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	4920      	ldr	r1, [pc, #128]	; (80002bc <getKeyInput+0x13c>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	            if (KeyReg3[i] == PRESSED_STATE) {
 8000240:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <getKeyInput+0x13c>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d123      	bne.n	8000294 <getKeyInput+0x114>
	    	        button_flag[i] = 1;
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <getKeyInput+0x140>)
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2101      	movs	r1, #1
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	        TimeOutForKeyPress[i] = 100;
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <getKeyInput+0x144>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2164      	movs	r1, #100	; 0x64
 800025c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000260:	e018      	b.n	8000294 <getKeyInput+0x114>
	            }

	        } else {
	    	    TimeOutForKeyPress[i]--;
 8000262:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <getKeyInput+0x144>)
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	1e5a      	subs	r2, r3, #1
 800026c:	4915      	ldr	r1, [pc, #84]	; (80002c4 <getKeyInput+0x144>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	            if (TimeOutForKeyPress[i] == 0) {
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <getKeyInput+0x144>)
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d109      	bne.n	8000294 <getKeyInput+0x114>
	        	    TimeOutForKeyPress[i] = 100;
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <getKeyInput+0x144>)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2164      	movs	r1, #100	; 0x64
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	        	    KeyReg3[i] = NORMAL_STATE;
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <getKeyInput+0x13c>)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	3301      	adds	r3, #1
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dda9      	ble.n	80001f4 <getKeyInput+0x74>
	            }
	        }
	    }
    }
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000060 	.word	0x20000060
 80002b0:	20000090 	.word	0x20000090
 80002b4:	20000054 	.word	0x20000054
 80002b8:	40010c00 	.word	0x40010c00
 80002bc:	20000048 	.word	0x20000048
 80002c0:	20000084 	.word	0x20000084
 80002c4:	2000006c 	.word	0x2000006c

080002c8 <display7SEG>:
#include "fsm_auto.h"

int turn = 0;

void display7SEG(int tenInt, int unitInt)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b08e      	sub	sp, #56	; 0x38
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
    // Array of segment patterns for numbers 0 - 9
    int segment_patterns[10] = {
 80002d2:	4b60      	ldr	r3, [pc, #384]	; (8000454 <display7SEG+0x18c>)
 80002d4:	f107 0408 	add.w	r4, r7, #8
 80002d8:	461d      	mov	r5, r3
 80002da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002e6:	e884 0003 	stmia.w	r4, {r0, r1}
    	     0b00000000, // 8: all segments
             0b00010000  // 9: segments a, b, c, d, f, g
    };

    // Get the segment pattern for the given number
    int pattern1 = segment_patterns[tenInt];
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80002f2:	4413      	add	r3, r2
 80002f4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80002f8:	637b      	str	r3, [r7, #52]	; 0x34
    int pattern2 = segment_patterns[unitInt];
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000302:	4413      	add	r3, r2
 8000304:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000308:	633b      	str	r3, [r7, #48]	; 0x30

    // Set each segment based on the pattern
    HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, (pattern1 & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 0
 800030a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	461a      	mov	r2, r3
 8000316:	2180      	movs	r1, #128	; 0x80
 8000318:	484f      	ldr	r0, [pc, #316]	; (8000458 <display7SEG+0x190>)
 800031a:	f001 f99c 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, (pattern1 & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 1
 800031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000320:	105b      	asrs	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000330:	4849      	ldr	r0, [pc, #292]	; (8000458 <display7SEG+0x190>)
 8000332:	f001 f990 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, (pattern1 & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 2
 8000336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000338:	109b      	asrs	r3, r3, #2
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000348:	4843      	ldr	r0, [pc, #268]	; (8000458 <display7SEG+0x190>)
 800034a:	f001 f984 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, (pattern1 & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 3
 800034e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000350:	10db      	asrs	r3, r3, #3
 8000352:	b2db      	uxtb	r3, r3
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	461a      	mov	r2, r3
 800035c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000360:	483d      	ldr	r0, [pc, #244]	; (8000458 <display7SEG+0x190>)
 8000362:	f001 f978 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, (pattern1 & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 4
 8000366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000368:	111b      	asrs	r3, r3, #4
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000378:	4837      	ldr	r0, [pc, #220]	; (8000458 <display7SEG+0x190>)
 800037a:	f001 f96c 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, (pattern1 & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 5
 800037e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000380:	115b      	asrs	r3, r3, #5
 8000382:	b2db      	uxtb	r3, r3
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	b2db      	uxtb	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000390:	4831      	ldr	r0, [pc, #196]	; (8000458 <display7SEG+0x190>)
 8000392:	f001 f960 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, (pattern1 & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 6
 8000396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000398:	119b      	asrs	r3, r3, #6
 800039a:	b2db      	uxtb	r3, r3
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a8:	482b      	ldr	r0, [pc, #172]	; (8000458 <display7SEG+0x190>)
 80003aa:	f001 f954 	bl	8001656 <HAL_GPIO_WritePin>


    HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, (pattern2 & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 0
 80003ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003be:	4826      	ldr	r0, [pc, #152]	; (8000458 <display7SEG+0x190>)
 80003c0:	f001 f949 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, (pattern2 & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 1
 80003c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d6:	4820      	ldr	r0, [pc, #128]	; (8000458 <display7SEG+0x190>)
 80003d8:	f001 f93d 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_21_GPIO_Port, SEG_21_Pin, (pattern2 & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 2
 80003dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003de:	109b      	asrs	r3, r3, #2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	2101      	movs	r1, #1
 80003ec:	481b      	ldr	r0, [pc, #108]	; (800045c <display7SEG+0x194>)
 80003ee:	f001 f932 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_31_GPIO_Port, SEG_31_Pin, (pattern2 & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 3
 80003f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003f4:	10db      	asrs	r3, r3, #3
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	2102      	movs	r1, #2
 8000402:	4816      	ldr	r0, [pc, #88]	; (800045c <display7SEG+0x194>)
 8000404:	f001 f927 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_41_GPIO_Port, SEG_41_Pin, (pattern2 & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 4
 8000408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800040a:	111b      	asrs	r3, r3, #4
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	2104      	movs	r1, #4
 8000418:	4810      	ldr	r0, [pc, #64]	; (800045c <display7SEG+0x194>)
 800041a:	f001 f91c 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_51_GPIO_Port, SEG_51_Pin, (pattern2 & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 5
 800041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000420:	115b      	asrs	r3, r3, #5
 8000422:	b2db      	uxtb	r3, r3
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	2108      	movs	r1, #8
 800042e:	480b      	ldr	r0, [pc, #44]	; (800045c <display7SEG+0x194>)
 8000430:	f001 f911 	bl	8001656 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_61_GPIO_Port, SEG_61_Pin, (pattern2 & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 6
 8000434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000436:	119b      	asrs	r3, r3, #6
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2110      	movs	r1, #16
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <display7SEG+0x194>)
 8000446:	f001 f906 	bl	8001656 <HAL_GPIO_WritePin>
}
 800044a:	bf00      	nop
 800044c:	3738      	adds	r7, #56	; 0x38
 800044e:	46bd      	mov	sp, r7
 8000450:	bdb0      	pop	{r4, r5, r7, pc}
 8000452:	bf00      	nop
 8000454:	08002698 	.word	0x08002698
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00

08000460 <displayAll7SEG>:


void displayAll7SEG() {
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	if (timer_flag[3] == 1) { // Timer is set on main function
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <displayAll7SEG+0xbc>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d10e      	bne.n	800048a <displayAll7SEG+0x2a>
		setTimer(3, 500);
 800046c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000470:	2003      	movs	r0, #3
 8000472:	f000 fbc9 	bl	8000c08 <setTimer>
		turn = !turn;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <displayAll7SEG+0xc0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	bf0c      	ite	eq
 800047e:	2301      	moveq	r3, #1
 8000480:	2300      	movne	r3, #0
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	4b26      	ldr	r3, [pc, #152]	; (8000520 <displayAll7SEG+0xc0>)
 8000488:	601a      	str	r2, [r3, #0]
	}

	// Toggle the displayed segment
	if (turn == 0) {
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <displayAll7SEG+0xc0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d121      	bne.n	80004d6 <displayAll7SEG+0x76>
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	4823      	ldr	r0, [pc, #140]	; (8000524 <displayAll7SEG+0xc4>)
 8000498:	f001 f8dd 	bl	8001656 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	4820      	ldr	r0, [pc, #128]	; (8000524 <displayAll7SEG+0xc4>)
 80004a2:	f001 f8d8 	bl	8001656 <HAL_GPIO_WritePin>
	    display7SEG(SEGvalue1 / 10, SEGvalue1 % 10);
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <displayAll7SEG+0xc8>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a20      	ldr	r2, [pc, #128]	; (800052c <displayAll7SEG+0xcc>)
 80004ac:	fb82 1203 	smull	r1, r2, r2, r3
 80004b0:	1092      	asrs	r2, r2, #2
 80004b2:	17db      	asrs	r3, r3, #31
 80004b4:	1ad0      	subs	r0, r2, r3
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <displayAll7SEG+0xc8>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <displayAll7SEG+0xcc>)
 80004bc:	fb83 1302 	smull	r1, r3, r3, r2
 80004c0:	1099      	asrs	r1, r3, #2
 80004c2:	17d3      	asrs	r3, r2, #31
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	460b      	mov	r3, r1
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	440b      	add	r3, r1
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	1ad1      	subs	r1, r2, r3
 80004d0:	f7ff fefa 	bl	80002c8 <display7SEG>
	} else {
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
	    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
	    display7SEG(SEGvalue2 / 10, SEGvalue2 % 10);
	}
}
 80004d4:	e020      	b.n	8000518 <displayAll7SEG+0xb8>
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2140      	movs	r1, #64	; 0x40
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <displayAll7SEG+0xc4>)
 80004dc:	f001 f8bb 	bl	8001656 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <displayAll7SEG+0xc4>)
 80004e6:	f001 f8b6 	bl	8001656 <HAL_GPIO_WritePin>
	    display7SEG(SEGvalue2 / 10, SEGvalue2 % 10);
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <displayAll7SEG+0xd0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a0f      	ldr	r2, [pc, #60]	; (800052c <displayAll7SEG+0xcc>)
 80004f0:	fb82 1203 	smull	r1, r2, r2, r3
 80004f4:	1092      	asrs	r2, r2, #2
 80004f6:	17db      	asrs	r3, r3, #31
 80004f8:	1ad0      	subs	r0, r2, r3
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <displayAll7SEG+0xd0>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <displayAll7SEG+0xcc>)
 8000500:	fb83 1302 	smull	r1, r3, r3, r2
 8000504:	1099      	asrs	r1, r3, #2
 8000506:	17d3      	asrs	r3, r2, #31
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	460b      	mov	r3, r1
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	440b      	add	r3, r1
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	1ad1      	subs	r1, r2, r3
 8000514:	f7ff fed8 	bl	80002c8 <display7SEG>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200000d0 	.word	0x200000d0
 8000520:	20000040 	.word	0x20000040
 8000524:	40010c00 	.word	0x40010c00
 8000528:	2000009c 	.word	0x2000009c
 800052c:	66666667 	.word	0x66666667
 8000530:	200000fc 	.word	0x200000fc

08000534 <fsmAuto>:
#include "traffic_light.h"
#include "softwareTimer.h"
#include "display_traffic7seg.h"
#include "button.h"

void fsmAuto() {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	if (mode > 1) {
 8000538:	4b66      	ldr	r3, [pc, #408]	; (80006d4 <fsmAuto+0x1a0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b01      	cmp	r3, #1
 800053e:	f300 80c1 	bgt.w	80006c4 <fsmAuto+0x190>
		return;
	} else {

		// Update SEGvalue1 and SEGvalue2 with remaining times
		SEGvalue1 = (getRemainingTime(0) / 1000) + 1;  // For Pair 1
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fbb0 	bl	8000ca8 <getRemainingTime>
 8000548:	4603      	mov	r3, r0
 800054a:	4a63      	ldr	r2, [pc, #396]	; (80006d8 <fsmAuto+0x1a4>)
 800054c:	fb82 1203 	smull	r1, r2, r2, r3
 8000550:	1192      	asrs	r2, r2, #6
 8000552:	17db      	asrs	r3, r3, #31
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	3301      	adds	r3, #1
 8000558:	4a60      	ldr	r2, [pc, #384]	; (80006dc <fsmAuto+0x1a8>)
 800055a:	6013      	str	r3, [r2, #0]
		SEGvalue2 = (getRemainingTime(1) / 1000) + 1;  // For Pair 2
 800055c:	2001      	movs	r0, #1
 800055e:	f000 fba3 	bl	8000ca8 <getRemainingTime>
 8000562:	4603      	mov	r3, r0
 8000564:	4a5c      	ldr	r2, [pc, #368]	; (80006d8 <fsmAuto+0x1a4>)
 8000566:	fb82 1203 	smull	r1, r2, r2, r3
 800056a:	1192      	asrs	r2, r2, #6
 800056c:	17db      	asrs	r3, r3, #31
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	3301      	adds	r3, #1
 8000572:	4a5b      	ldr	r2, [pc, #364]	; (80006e0 <fsmAuto+0x1ac>)
 8000574:	6013      	str	r3, [r2, #0]

		displayAll7SEG();
 8000576:	f7ff ff73 	bl	8000460 <displayAll7SEG>

		// FSM for Pair 1
		switch (status1) {
 800057a:	4b5a      	ldr	r3, [pc, #360]	; (80006e4 <fsmAuto+0x1b0>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	2b05      	cmp	r3, #5
 8000582:	d84e      	bhi.n	8000622 <fsmAuto+0xee>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <fsmAuto+0x58>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005a5 	.word	0x080005a5
 8000590:	080005b9 	.word	0x080005b9
 8000594:	08000623 	.word	0x08000623
 8000598:	080005f9 	.word	0x080005f9
 800059c:	08000623 	.word	0x08000623
 80005a0:	080005d9 	.word	0x080005d9
			case INIT:
				status1 = AUTO_RED1;
 80005a4:	4b4f      	ldr	r3, [pc, #316]	; (80006e4 <fsmAuto+0x1b0>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
				setTimer(0, redDuration);
 80005aa:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <fsmAuto+0x1b4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 fb29 	bl	8000c08 <setTimer>

				break;
 80005b6:	e034      	b.n	8000622 <fsmAuto+0xee>

			case AUTO_RED1:
				RED1();
 80005b8:	f000 fc3c 	bl	8000e34 <RED1>
				if (timer_flag[0]) {
 80005bc:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <fsmAuto+0x1b8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d029      	beq.n	8000618 <fsmAuto+0xe4>
					status1 = AUTO_GREEN1;
 80005c4:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <fsmAuto+0x1b0>)
 80005c6:	2206      	movs	r2, #6
 80005c8:	601a      	str	r2, [r3, #0]
					setTimer(0, greenDuration);
 80005ca:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <fsmAuto+0x1bc>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fb19 	bl	8000c08 <setTimer>
				}

				break;
 80005d6:	e01f      	b.n	8000618 <fsmAuto+0xe4>

			case AUTO_GREEN1:
				GREEN1();
 80005d8:	f000 fc6c 	bl	8000eb4 <GREEN1>
				if (timer_flag[0]) {
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <fsmAuto+0x1b8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d01b      	beq.n	800061c <fsmAuto+0xe8>
					status1 = AUTO_YELLOW1;
 80005e4:	4b3f      	ldr	r3, [pc, #252]	; (80006e4 <fsmAuto+0x1b0>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	601a      	str	r2, [r3, #0]
					setTimer(0, yellowDuration);
 80005ea:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <fsmAuto+0x1c0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fb09 	bl	8000c08 <setTimer>
				}

				break;
 80005f6:	e011      	b.n	800061c <fsmAuto+0xe8>

			case AUTO_YELLOW1:
				YELLOW1();
 80005f8:	f000 fc3c 	bl	8000e74 <YELLOW1>
				if (timer_flag[0]) {
 80005fc:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <fsmAuto+0x1b8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00d      	beq.n	8000620 <fsmAuto+0xec>
					status1 = AUTO_RED1;
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <fsmAuto+0x1b0>)
 8000606:	2202      	movs	r2, #2
 8000608:	601a      	str	r2, [r3, #0]
					setTimer(0, redDuration);
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <fsmAuto+0x1b4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f000 faf9 	bl	8000c08 <setTimer>
				}

				break;
 8000616:	e003      	b.n	8000620 <fsmAuto+0xec>
				break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <fsmAuto+0xee>
				break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <fsmAuto+0xee>
				break;
 8000620:	bf00      	nop
		}


		// FSM for Pair 2
		switch (status2) {
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <fsmAuto+0x1c4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	2b06      	cmp	r3, #6
 800062a:	d852      	bhi.n	80006d2 <fsmAuto+0x19e>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <fsmAuto+0x100>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000651 	.word	0x08000651
 8000638:	080006d3 	.word	0x080006d3
 800063c:	080006a5 	.word	0x080006a5
 8000640:	080006d3 	.word	0x080006d3
 8000644:	08000685 	.word	0x08000685
 8000648:	080006d3 	.word	0x080006d3
 800064c:	08000665 	.word	0x08000665
			case INIT:
				status2 = AUTO_GREEN2;
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <fsmAuto+0x1c4>)
 8000652:	2207      	movs	r2, #7
 8000654:	601a      	str	r2, [r3, #0]
				setTimer(1, greenDuration);
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <fsmAuto+0x1bc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	2001      	movs	r0, #1
 800065e:	f000 fad3 	bl	8000c08 <setTimer>

				break;
 8000662:	e036      	b.n	80006d2 <fsmAuto+0x19e>

			case AUTO_GREEN2:
				GREEN2();
 8000664:	f000 fc36 	bl	8000ed4 <GREEN2>
				if (timer_flag[1]) {
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <fsmAuto+0x1b8>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02b      	beq.n	80006c8 <fsmAuto+0x194>
					status2 = AUTO_YELLOW2;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <fsmAuto+0x1c4>)
 8000672:	2205      	movs	r2, #5
 8000674:	601a      	str	r2, [r3, #0]
					setTimer(1, yellowDuration);
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <fsmAuto+0x1c0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4619      	mov	r1, r3
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fac3 	bl	8000c08 <setTimer>
				}

				break;
 8000682:	e021      	b.n	80006c8 <fsmAuto+0x194>

			case AUTO_YELLOW2:
				YELLOW2();
 8000684:	f000 fc06 	bl	8000e94 <YELLOW2>
				if (timer_flag[1]) {
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <fsmAuto+0x1b8>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d01d      	beq.n	80006cc <fsmAuto+0x198>
					status2 = AUTO_RED2;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <fsmAuto+0x1c4>)
 8000692:	2203      	movs	r2, #3
 8000694:	601a      	str	r2, [r3, #0]
					setTimer(1, redDuration);
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <fsmAuto+0x1b4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fab3 	bl	8000c08 <setTimer>
				}

				break;
 80006a2:	e013      	b.n	80006cc <fsmAuto+0x198>

			case AUTO_RED2:
				RED2();
 80006a4:	f000 fbd6 	bl	8000e54 <RED2>
				if (timer_flag[1]) {
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <fsmAuto+0x1b8>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00f      	beq.n	80006d0 <fsmAuto+0x19c>
					status2 = AUTO_GREEN2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <fsmAuto+0x1c4>)
 80006b2:	2207      	movs	r2, #7
 80006b4:	601a      	str	r2, [r3, #0]
					setTimer(1, greenDuration);
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <fsmAuto+0x1bc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 faa3 	bl	8000c08 <setTimer>
				}

				break;
 80006c2:	e005      	b.n	80006d0 <fsmAuto+0x19c>
		return;
 80006c4:	bf00      	nop
 80006c6:	e004      	b.n	80006d2 <fsmAuto+0x19e>
				break;
 80006c8:	bf00      	nop
 80006ca:	e002      	b.n	80006d2 <fsmAuto+0x19e>
				break;
 80006cc:	bf00      	nop
 80006ce:	e000      	b.n	80006d2 <fsmAuto+0x19e>
				break;
 80006d0:	bf00      	nop
		}
	}
}
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	10624dd3 	.word	0x10624dd3
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	200000fc 	.word	0x200000fc
 80006e4:	20000010 	.word	0x20000010
 80006e8:	20000004 	.word	0x20000004
 80006ec:	200000d0 	.word	0x200000d0
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000014 	.word	0x20000014

080006fc <fsmSetting>:
#include "softwareTimer.h"
#include "display_traffic7seg.h"
#include "button.h"
#include "fsm_auto.h"

void fsmSetting() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	if (mode == 1 && previousMode == 4) {
 8000700:	4b81      	ldr	r3, [pc, #516]	; (8000908 <fsmSetting+0x20c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d104      	bne.n	8000712 <fsmSetting+0x16>
 8000708:	4b80      	ldr	r3, [pc, #512]	; (800090c <fsmSetting+0x210>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b04      	cmp	r3, #4
 800070e:	f000 80f9 	beq.w	8000904 <fsmSetting+0x208>
		return;
	} else {

		displayAll7SEG();
 8000712:	f7ff fea5 	bl	8000460 <displayAll7SEG>
        switch (mode) {
 8000716:	4b7c      	ldr	r3, [pc, #496]	; (8000908 <fsmSetting+0x20c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b04      	cmp	r3, #4
 800071c:	f000 80a4 	beq.w	8000868 <fsmSetting+0x16c>
 8000720:	2b04      	cmp	r3, #4
 8000722:	f300 80f0 	bgt.w	8000906 <fsmSetting+0x20a>
 8000726:	2b02      	cmp	r3, #2
 8000728:	d002      	beq.n	8000730 <fsmSetting+0x34>
 800072a:	2b03      	cmp	r3, #3
 800072c:	d04e      	beq.n	80007cc <fsmSetting+0xd0>
 800072e:	e0ea      	b.n	8000906 <fsmSetting+0x20a>
            case 2:
            	RedBlinky();
 8000730:	f000 fbe0 	bl	8000ef4 <RedBlinky>

            	// Increase red value everytime button 1 is pressed
            	if (isButtonPressed(1) == 1) {
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff fd09 	bl	800014c <isButtonPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d113      	bne.n	8000768 <fsmSetting+0x6c>
            		redIncreaseValue = redIncreaseValue + 1000;
 8000740:	4b73      	ldr	r3, [pc, #460]	; (8000910 <fsmSetting+0x214>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000748:	4a71      	ldr	r2, [pc, #452]	; (8000910 <fsmSetting+0x214>)
 800074a:	6013      	str	r3, [r2, #0]
            		if (redIncreaseValue + redDuration > 99000) {
 800074c:	4b70      	ldr	r3, [pc, #448]	; (8000910 <fsmSetting+0x214>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b70      	ldr	r3, [pc, #448]	; (8000914 <fsmSetting+0x218>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a70      	ldr	r2, [pc, #448]	; (8000918 <fsmSetting+0x21c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	dd05      	ble.n	8000768 <fsmSetting+0x6c>
            			redIncreaseValue = 1000 - redDuration;
 800075c:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <fsmSetting+0x218>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000764:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <fsmSetting+0x214>)
 8000766:	6013      	str	r3, [r2, #0]
            		}
            	}

            	// Update new red value if button 2 is pressed
            	if (isButtonPressed(2) == 1) {
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fcef 	bl	800014c <isButtonPressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d119      	bne.n	80007a8 <fsmSetting+0xac>
            		redDuration = redDuration + redIncreaseValue;
 8000774:	4b67      	ldr	r3, [pc, #412]	; (8000914 <fsmSetting+0x218>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b65      	ldr	r3, [pc, #404]	; (8000910 <fsmSetting+0x214>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4413      	add	r3, r2
 800077e:	4a65      	ldr	r2, [pc, #404]	; (8000914 <fsmSetting+0x218>)
 8000780:	6013      	str	r3, [r2, #0]
            		greenDuration = redDuration - yellowDuration; // Increases green when red increases
 8000782:	4b64      	ldr	r3, [pc, #400]	; (8000914 <fsmSetting+0x218>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b65      	ldr	r3, [pc, #404]	; (800091c <fsmSetting+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	4a64      	ldr	r2, [pc, #400]	; (8000920 <fsmSetting+0x224>)
 800078e:	6013      	str	r3, [r2, #0]
            		if (redDuration > 99000) {
 8000790:	4b60      	ldr	r3, [pc, #384]	; (8000914 <fsmSetting+0x218>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a60      	ldr	r2, [pc, #384]	; (8000918 <fsmSetting+0x21c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	dd03      	ble.n	80007a2 <fsmSetting+0xa6>
            			redDuration = 1000;
 800079a:	4b5e      	ldr	r3, [pc, #376]	; (8000914 <fsmSetting+0x218>)
 800079c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a0:	601a      	str	r2, [r3, #0]
            		}

            		redIncreaseValue = 0;
 80007a2:	4b5b      	ldr	r3, [pc, #364]	; (8000910 <fsmSetting+0x214>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
            	}

            	// Display current red duration and mode on the 7-segment display
            	SEGvalue1 = (redDuration + redIncreaseValue) / 1000;
 80007a8:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <fsmSetting+0x218>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b58      	ldr	r3, [pc, #352]	; (8000910 <fsmSetting+0x214>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a5c      	ldr	r2, [pc, #368]	; (8000924 <fsmSetting+0x228>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	1192      	asrs	r2, r2, #6
 80007ba:	17db      	asrs	r3, r3, #31
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a5a      	ldr	r2, [pc, #360]	; (8000928 <fsmSetting+0x22c>)
 80007c0:	6013      	str	r3, [r2, #0]
            	SEGvalue2 = mode;
 80007c2:	4b51      	ldr	r3, [pc, #324]	; (8000908 <fsmSetting+0x20c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a59      	ldr	r2, [pc, #356]	; (800092c <fsmSetting+0x230>)
 80007c8:	6013      	str	r3, [r2, #0]

            	break;
 80007ca:	e09c      	b.n	8000906 <fsmSetting+0x20a>

            case 3:
            	YellowBlinky();
 80007cc:	f000 fbc0 	bl	8000f50 <YellowBlinky>

            	if (isButtonPressed(1) == 1) {
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fcbb 	bl	800014c <isButtonPressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d113      	bne.n	8000804 <fsmSetting+0x108>
            		yellowIncreaseValue = yellowIncreaseValue + 1000;
 80007dc:	4b54      	ldr	r3, [pc, #336]	; (8000930 <fsmSetting+0x234>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <fsmSetting+0x234>)
 80007e6:	6013      	str	r3, [r2, #0]
            		if (yellowIncreaseValue + yellowDuration > 99000) {
 80007e8:	4b51      	ldr	r3, [pc, #324]	; (8000930 <fsmSetting+0x234>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b4b      	ldr	r3, [pc, #300]	; (800091c <fsmSetting+0x220>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a49      	ldr	r2, [pc, #292]	; (8000918 <fsmSetting+0x21c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	dd05      	ble.n	8000804 <fsmSetting+0x108>
            			yellowIncreaseValue = 1000 - yellowDuration;
 80007f8:	4b48      	ldr	r3, [pc, #288]	; (800091c <fsmSetting+0x220>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000800:	4a4b      	ldr	r2, [pc, #300]	; (8000930 <fsmSetting+0x234>)
 8000802:	6013      	str	r3, [r2, #0]
            		}
            	}

            	if (isButtonPressed(2) == 1) {
 8000804:	2002      	movs	r0, #2
 8000806:	f7ff fca1 	bl	800014c <isButtonPressed>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d119      	bne.n	8000844 <fsmSetting+0x148>
            	    yellowDuration += yellowIncreaseValue;
 8000810:	4b42      	ldr	r3, [pc, #264]	; (800091c <fsmSetting+0x220>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b46      	ldr	r3, [pc, #280]	; (8000930 <fsmSetting+0x234>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4413      	add	r3, r2
 800081a:	4a40      	ldr	r2, [pc, #256]	; (800091c <fsmSetting+0x220>)
 800081c:	6013      	str	r3, [r2, #0]
            	    redDuration = yellowDuration + greenDuration; // Increases red when yellow increases
 800081e:	4b3f      	ldr	r3, [pc, #252]	; (800091c <fsmSetting+0x220>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <fsmSetting+0x224>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <fsmSetting+0x218>)
 800082a:	6013      	str	r3, [r2, #0]
            		if (yellowDuration > 99000) {
 800082c:	4b3b      	ldr	r3, [pc, #236]	; (800091c <fsmSetting+0x220>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a39      	ldr	r2, [pc, #228]	; (8000918 <fsmSetting+0x21c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	dd03      	ble.n	800083e <fsmSetting+0x142>
            			yellowDuration = 1000;
 8000836:	4b39      	ldr	r3, [pc, #228]	; (800091c <fsmSetting+0x220>)
 8000838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083c:	601a      	str	r2, [r3, #0]
            		}

            		yellowIncreaseValue = 0;
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <fsmSetting+0x234>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
            	}

         	  SEGvalue1 = (yellowDuration + yellowIncreaseValue) / 1000;
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <fsmSetting+0x220>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b39      	ldr	r3, [pc, #228]	; (8000930 <fsmSetting+0x234>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4a35      	ldr	r2, [pc, #212]	; (8000924 <fsmSetting+0x228>)
 8000850:	fb82 1203 	smull	r1, r2, r2, r3
 8000854:	1192      	asrs	r2, r2, #6
 8000856:	17db      	asrs	r3, r3, #31
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <fsmSetting+0x22c>)
 800085c:	6013      	str	r3, [r2, #0]
         	  SEGvalue2 = mode;
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <fsmSetting+0x20c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a32      	ldr	r2, [pc, #200]	; (800092c <fsmSetting+0x230>)
 8000864:	6013      	str	r3, [r2, #0]

         	  break;
 8000866:	e04e      	b.n	8000906 <fsmSetting+0x20a>

            case 4:
            	GreenBlinky();
 8000868:	f000 fba0 	bl	8000fac <GreenBlinky>

            	if (isButtonPressed(1) == 1) {
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fc6d 	bl	800014c <isButtonPressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	d113      	bne.n	80008a0 <fsmSetting+0x1a4>
            		greenIncreaseValue = greenIncreaseValue + 1000;
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <fsmSetting+0x238>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000880:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <fsmSetting+0x238>)
 8000882:	6013      	str	r3, [r2, #0]
            		if (greenIncreaseValue + greenDuration > 99000) {
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <fsmSetting+0x238>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <fsmSetting+0x224>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4413      	add	r3, r2
 800088e:	4a22      	ldr	r2, [pc, #136]	; (8000918 <fsmSetting+0x21c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	dd05      	ble.n	80008a0 <fsmSetting+0x1a4>
            			greenIncreaseValue = 1000 - greenDuration;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <fsmSetting+0x224>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800089c:	4a25      	ldr	r2, [pc, #148]	; (8000934 <fsmSetting+0x238>)
 800089e:	6013      	str	r3, [r2, #0]
            		}
            	}

            	if (isButtonPressed(2) == 1) {
 80008a0:	2002      	movs	r0, #2
 80008a2:	f7ff fc53 	bl	800014c <isButtonPressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d119      	bne.n	80008e0 <fsmSetting+0x1e4>
            		greenDuration += greenIncreaseValue;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <fsmSetting+0x224>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <fsmSetting+0x238>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <fsmSetting+0x224>)
 80008b8:	6013      	str	r3, [r2, #0]
            	    redDuration = yellowDuration + greenDuration; // Increases red when green increases
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <fsmSetting+0x220>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <fsmSetting+0x224>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <fsmSetting+0x218>)
 80008c6:	6013      	str	r3, [r2, #0]
            		if (greenDuration > 99000) {
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <fsmSetting+0x224>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <fsmSetting+0x21c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	dd03      	ble.n	80008da <fsmSetting+0x1de>
            			greenDuration = 1000;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <fsmSetting+0x224>)
 80008d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d8:	601a      	str	r2, [r3, #0]
            		}

            		greenIncreaseValue = 0;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <fsmSetting+0x238>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
            	}

            	SEGvalue1 = (greenDuration + greenIncreaseValue) / 1000;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <fsmSetting+0x224>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <fsmSetting+0x238>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <fsmSetting+0x228>)
 80008ec:	fb82 1203 	smull	r1, r2, r2, r3
 80008f0:	1192      	asrs	r2, r2, #6
 80008f2:	17db      	asrs	r3, r3, #31
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <fsmSetting+0x22c>)
 80008f8:	6013      	str	r3, [r2, #0]
            	SEGvalue2 = mode;
 80008fa:	4b03      	ldr	r3, [pc, #12]	; (8000908 <fsmSetting+0x20c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <fsmSetting+0x230>)
 8000900:	6013      	str	r3, [r2, #0]

            	break;
 8000902:	e000      	b.n	8000906 <fsmSetting+0x20a>
		return;
 8000904:	bf00      	nop
        }
    }
}
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	20000044 	.word	0x20000044
 8000910:	200000f8 	.word	0x200000f8
 8000914:	20000004 	.word	0x20000004
 8000918:	000182b8 	.word	0x000182b8
 800091c:	20000008 	.word	0x20000008
 8000920:	2000000c 	.word	0x2000000c
 8000924:	10624dd3 	.word	0x10624dd3
 8000928:	2000009c 	.word	0x2000009c
 800092c:	200000fc 	.word	0x200000fc
 8000930:	200000cc 	.word	0x200000cc
 8000934:	200000c8 	.word	0x200000c8

08000938 <getMode>:

int redDuration = 5000;      // Default 5 seconds
int yellowDuration = 2000;   // Default 2 seconds
int greenDuration = 3000;    // Default 3 seconds

void getMode() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1) {
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fc05 	bl	800014c <isButtonPressed>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d130      	bne.n	80009aa <getMode+0x72>
		trafficLightINIT();
 8000948:	f000 fa50 	bl	8000dec <trafficLightINIT>
	    mode++;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <getMode+0x78>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <getMode+0x78>)
 8000954:	6013      	str	r3, [r2, #0]
	    previousMode = (mode - 1) % 4;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <getMode+0x78>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3b01      	subs	r3, #1
 800095c:	425a      	negs	r2, r3
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	f002 0203 	and.w	r2, r2, #3
 8000966:	bf58      	it	pl
 8000968:	4253      	negpl	r3, r2
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <getMode+0x7c>)
 800096c:	6013      	str	r3, [r2, #0]
	    if (mode > 4) {
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <getMode+0x78>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b04      	cmp	r3, #4
 8000974:	dd19      	ble.n	80009aa <getMode+0x72>
	    	status1 = INIT;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <getMode+0x80>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
	    	status2 = INIT;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <getMode+0x84>)
 800097e:	2201      	movs	r2, #1
 8000980:	601a      	str	r2, [r3, #0]
	    	redIncreaseValue = 0;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <getMode+0x88>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
	    	yellowIncreaseValue = 0;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <getMode+0x8c>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
	    	greenIncreaseValue = 0;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <getMode+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
            turn = 0;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <getMode+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]

            setTimer(3, 500); // Set timer again for 7SEG display to sync with current mode
 800099a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 f932 	bl	8000c08 <setTimer>

	    	mode = 1; // Loop back to Mode 1
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <getMode+0x78>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
	    }
	}
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000044 	.word	0x20000044
 80009b8:	20000010 	.word	0x20000010
 80009bc:	20000014 	.word	0x20000014
 80009c0:	200000f8 	.word	0x200000f8
 80009c4:	200000cc 	.word	0x200000cc
 80009c8:	200000c8 	.word	0x200000c8
 80009cc:	20000040 	.word	0x20000040

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fb3e 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f81a 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80009dc:	f000 f854 	bl	8000a88 <MX_TIM2_Init>
  MX_GPIO_Init();
 80009e0:	f000 f89e 	bl	8000b20 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <main+0x3c>)
 80009e6:	f001 fa93 	bl	8001f10 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(3, 500); // For 7seg display
 80009ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f90a 	bl	8000c08 <setTimer>
  setTimer(4, 500); // For mode 2, 3 and 4
 80009f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009f8:	2004      	movs	r0, #4
 80009fa:	f000 f905 	bl	8000c08 <setTimer>
  while (1)
  {

   getMode();
 80009fe:	f7ff ff9b 	bl	8000938 <getMode>

   fsmAuto();
 8000a02:	f7ff fd97 	bl	8000534 <fsmAuto>

   fsmSetting();
 8000a06:	f7ff fe79 	bl	80006fc <fsmSetting>
   getMode();
 8000a0a:	e7f8      	b.n	80009fe <main+0x2e>
 8000a0c:	20000100 	.word	0x20000100

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fe26 	bl	8002670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fe36 	bl	80016b8 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a52:	f000 f8d3 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f8a2 	bl	8001bb8 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f8bf 	bl	8000bfc <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3740      	adds	r7, #64	; 0x40
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000abc:	2209      	movs	r2, #9
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000ace:	f001 f9cf 	bl	8001e70 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ad8:	f000 f890 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000aea:	f001 fb4d 	bl	8002188 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af4:	f000 f882 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_TIM2_Init+0x94>)
 8000b06:	f001 fd25 	bl	8002554 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b10:	f000 f874 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000100 	.word	0x20000100

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000b64:	2200      	movs	r2, #0
 8000b66:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000b6a:	481c      	ldr	r0, [pc, #112]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b6c:	f000 fd73 	bl	8001656 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin|SEG_01_Pin|SEG_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_21_Pin|SEG_31_Pin|SEG_41_Pin|SEG_51_Pin
 8000b70:	2200      	movs	r2, #0
 8000b72:	21df      	movs	r1, #223	; 0xdf
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000b76:	f000 fd6e 	bl	8001656 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG_0_Pin SEG_1_Pin
                           SEG_2_Pin SEG_3_Pin SEG_4_Pin SEG_5_Pin
                           SEG_6_Pin SEG_01_Pin SEG_11_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000b7a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b7e:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin|SEG_01_Pin|SEG_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b94:	f000 fbce 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_21_Pin SEG_31_Pin SEG_41_Pin SEG_51_Pin
                           SEG_61_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG_21_Pin|SEG_31_Pin|SEG_41_Pin|SEG_51_Pin
 8000b98:	23df      	movs	r3, #223	; 0xdf
 8000b9a:	60bb      	str	r3, [r7, #8]
                          |SEG_61_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000bb0:	f000 fbc0 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000bb4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000bca:	f000 fbb3 	bl	8001334 <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	timer_run();
 8000bec:	f000 f82c 	bl	8000c48 <timer_run>
	getKeyInput();
 8000bf0:	f7ff fac6 	bl	8000180 <getKeyInput>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <setTimer>:
 *
 */

#include "softwareTimer.h"

void setTimer(int index, int counter) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <setTimer+0x34>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2100      	movs	r1, #0
 8000c18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <setTimer+0x38>)
 8000c20:	fb82 1203 	smull	r1, r2, r2, r3
 8000c24:	1092      	asrs	r2, r2, #2
 8000c26:	17db      	asrs	r3, r3, #31
 8000c28:	1ad2      	subs	r2, r2, r3
 8000c2a:	4906      	ldr	r1, [pc, #24]	; (8000c44 <setTimer+0x3c>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	200000d0 	.word	0x200000d0
 8000c40:	66666667 	.word	0x66666667
 8000c44:	200000a0 	.word	0x200000a0

08000c48 <timer_run>:

void timer_run() {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e01c      	b.n	8000c8e <timer_run+0x46>
		 if (timer_counter[i] > 0) {
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <timer_run+0x58>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	dd13      	ble.n	8000c88 <timer_run+0x40>
			 timer_counter[i]--;
 8000c60:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <timer_run+0x58>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	1e5a      	subs	r2, r3, #1
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <timer_run+0x58>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 if (timer_counter[i] <= 0) {
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <timer_run+0x58>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	dc04      	bgt.n	8000c88 <timer_run+0x40>
				 timer_flag[i] = 1;
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <timer_run+0x5c>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2101      	movs	r1, #1
 8000c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	dddf      	ble.n	8000c54 <timer_run+0xc>
			}
		}
	}
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	200000a0 	.word	0x200000a0
 8000ca4:	200000d0 	.word	0x200000d0

08000ca8 <getRemainingTime>:

int getRemainingTime(int index) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    return timer_counter[index] * TICK; // Convert back to actual time
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <getRemainingTime+0x24>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200000a0 	.word	0x200000a0

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_MspInit+0x60>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_MspInit+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d44:	d113      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_TIM_Base_MspInit+0x44>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <HAL_TIM_Base_MspInit+0x44>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_TIM_Base_MspInit+0x44>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	201c      	movs	r0, #28
 8000d64:	f000 faaf 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d68:	201c      	movs	r0, #28
 8000d6a:	f000 fac8 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f98d 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM2_IRQHandler+0x10>)
 8000dd2:	f001 f8e9 	bl	8001fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000100 	.word	0x20000100

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <trafficLightINIT>:
 */

#include "traffic_light.h"
#include "softwareTimer.h"

void trafficLightINIT() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2102      	movs	r1, #2
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <trafficLightINIT+0x44>)
 8000df6:	f000 fc2e 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <trafficLightINIT+0x44>)
 8000e00:	f000 fc29 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2108      	movs	r1, #8
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <trafficLightINIT+0x44>)
 8000e0a:	f000 fc24 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2110      	movs	r1, #16
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <trafficLightINIT+0x44>)
 8000e14:	f000 fc1f 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <trafficLightINIT+0x44>)
 8000e1e:	f000 fc1a 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <trafficLightINIT+0x44>)
 8000e28:	f000 fc15 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010800 	.word	0x40010800

08000e34 <RED1>:

void RED1() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <RED1+0x1c>)
 8000e3e:	f000 fc0a 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2102      	movs	r1, #2
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <RED1+0x1c>)
 8000e48:	f000 fc05 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010800 	.word	0x40010800

08000e54 <RED2>:

void RED2() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <RED2+0x1c>)
 8000e5e:	f000 fbfa 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <RED2+0x1c>)
 8000e68:	f000 fbf5 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010800 	.word	0x40010800

08000e74 <YELLOW1>:

void YELLOW1() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <YELLOW1+0x1c>)
 8000e7e:	f000 fbea 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2104      	movs	r1, #4
 8000e86:	4802      	ldr	r0, [pc, #8]	; (8000e90 <YELLOW1+0x1c>)
 8000e88:	f000 fbe5 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010800 	.word	0x40010800

08000e94 <YELLOW2>:

void YELLOW2() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2140      	movs	r1, #64	; 0x40
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <YELLOW2+0x1c>)
 8000e9e:	f000 fbda 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <YELLOW2+0x1c>)
 8000ea8:	f000 fbd5 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010800 	.word	0x40010800

08000eb4 <GREEN1>:

void GREEN1() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <GREEN1+0x1c>)
 8000ebe:	f000 fbca 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <GREEN1+0x1c>)
 8000ec8:	f000 fbc5 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <GREEN2>:

void GREEN2() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <GREEN2+0x1c>)
 8000ede:	f000 fbba 	bl	8001656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <GREEN2+0x1c>)
 8000ee8:	f000 fbb5 	bl	8001656 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <RedBlinky>:

void RedBlinky() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	if (timer_flag[4] == 1) {
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <RedBlinky+0x54>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d120      	bne.n	8000f42 <RedBlinky+0x4e>
		setTimer(4, 500);
 8000f00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff fe7f 	bl	8000c08 <setTimer>

		HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	480f      	ldr	r0, [pc, #60]	; (8000f4c <RedBlinky+0x58>)
 8000f0e:	f000 fbba 	bl	8001686 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000f12:	2110      	movs	r1, #16
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <RedBlinky+0x58>)
 8000f16:	f000 fbb6 	bl	8001686 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <RedBlinky+0x58>)
 8000f20:	f000 fb99 	bl	8001656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2108      	movs	r1, #8
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <RedBlinky+0x58>)
 8000f2a:	f000 fb94 	bl	8001656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2120      	movs	r1, #32
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <RedBlinky+0x58>)
 8000f34:	f000 fb8f 	bl	8001656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <RedBlinky+0x58>)
 8000f3e:	f000 fb8a 	bl	8001656 <HAL_GPIO_WritePin>
	}
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000d0 	.word	0x200000d0
 8000f4c:	40010800 	.word	0x40010800

08000f50 <YellowBlinky>:

void YellowBlinky() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	if (timer_flag[4] == 1) {
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <YellowBlinky+0x54>)
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d120      	bne.n	8000f9e <YellowBlinky+0x4e>
		setTimer(4, 500);
 8000f5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff fe51 	bl	8000c08 <setTimer>

		HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000f66:	2104      	movs	r1, #4
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <YellowBlinky+0x58>)
 8000f6a:	f000 fb8c 	bl	8001686 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000f6e:	2120      	movs	r1, #32
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <YellowBlinky+0x58>)
 8000f72:	f000 fb88 	bl	8001686 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <YellowBlinky+0x58>)
 8000f7c:	f000 fb6b 	bl	8001656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2108      	movs	r1, #8
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <YellowBlinky+0x58>)
 8000f86:	f000 fb66 	bl	8001656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <YellowBlinky+0x58>)
 8000f90:	f000 fb61 	bl	8001656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2140      	movs	r1, #64	; 0x40
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <YellowBlinky+0x58>)
 8000f9a:	f000 fb5c 	bl	8001656 <HAL_GPIO_WritePin>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000d0 	.word	0x200000d0
 8000fa8:	40010800 	.word	0x40010800

08000fac <GreenBlinky>:

void GreenBlinky() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	if (timer_flag[4] == 1) {
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <GreenBlinky+0x54>)
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d120      	bne.n	8000ffa <GreenBlinky+0x4e>
	    setTimer(4, 500);
 8000fb8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	f7ff fe23 	bl	8000c08 <setTimer>

	    HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <GreenBlinky+0x58>)
 8000fc6:	f000 fb5e 	bl	8001686 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000fca:	2140      	movs	r1, #64	; 0x40
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <GreenBlinky+0x58>)
 8000fce:	f000 fb5a 	bl	8001686 <HAL_GPIO_TogglePin>

	    HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <GreenBlinky+0x58>)
 8000fd8:	f000 fb3d 	bl	8001656 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2104      	movs	r1, #4
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <GreenBlinky+0x58>)
 8000fe2:	f000 fb38 	bl	8001656 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <GreenBlinky+0x58>)
 8000fec:	f000 fb33 	bl	8001656 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <GreenBlinky+0x58>)
 8000ff6:	f000 fb2e 	bl	8001656 <HAL_GPIO_WritePin>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000d0 	.word	0x200000d0
 8001004:	40010800 	.word	0x40010800

08001008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff feea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100e:	490c      	ldr	r1, [pc, #48]	; (8001040 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001010:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001024:	4c09      	ldr	r4, [pc, #36]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f001 faf9 	bl	8002628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff fccb 	bl	80009d0 <main>
  bx lr
 800103a:	4770      	bx	lr
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001044:	080026ec 	.word	0x080026ec
  ldr r2, =_sbss
 8001048:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800104c:	2000014c 	.word	0x2000014c

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f923 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fe2e 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f93b 	bl	800131a <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f903 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000018 	.word	0x20000018
 80010d8:	20000020 	.word	0x20000020
 80010dc:	2000001c 	.word	0x2000001c

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x20>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000020 	.word	0x20000020
 8001100:	20000148 	.word	0x20000148

08001104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000148 	.word	0x20000148

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4906      	ldr	r1, [pc, #24]	; (80011b0 <__NVIC_EnableIRQ+0x34>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff2d 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff42 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff35 	bl	800117c <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	; 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e148      	b.n	80015da <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001348:	2201      	movs	r2, #1
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8137 	bne.w	80015d4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4aa3      	ldr	r2, [pc, #652]	; (80015f8 <HAL_GPIO_Init+0x2c4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d05e      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001370:	4aa1      	ldr	r2, [pc, #644]	; (80015f8 <HAL_GPIO_Init+0x2c4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d875      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001376:	4aa1      	ldr	r2, [pc, #644]	; (80015fc <HAL_GPIO_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d058      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 800137c:	4a9f      	ldr	r2, [pc, #636]	; (80015fc <HAL_GPIO_Init+0x2c8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d86f      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001382:	4a9f      	ldr	r2, [pc, #636]	; (8001600 <HAL_GPIO_Init+0x2cc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d052      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001388:	4a9d      	ldr	r2, [pc, #628]	; (8001600 <HAL_GPIO_Init+0x2cc>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d869      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800138e:	4a9d      	ldr	r2, [pc, #628]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d04c      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001394:	4a9b      	ldr	r2, [pc, #620]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d863      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800139a:	4a9b      	ldr	r2, [pc, #620]	; (8001608 <HAL_GPIO_Init+0x2d4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d046      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 80013a0:	4a99      	ldr	r2, [pc, #612]	; (8001608 <HAL_GPIO_Init+0x2d4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d85d      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d82a      	bhi.n	8001400 <HAL_GPIO_Init+0xcc>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d859      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HAL_GPIO_Init+0x80>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	08001409 	.word	0x08001409
 80013bc:	0800141b 	.word	0x0800141b
 80013c0:	0800145d 	.word	0x0800145d
 80013c4:	08001463 	.word	0x08001463
 80013c8:	08001463 	.word	0x08001463
 80013cc:	08001463 	.word	0x08001463
 80013d0:	08001463 	.word	0x08001463
 80013d4:	08001463 	.word	0x08001463
 80013d8:	08001463 	.word	0x08001463
 80013dc:	08001463 	.word	0x08001463
 80013e0:	08001463 	.word	0x08001463
 80013e4:	08001463 	.word	0x08001463
 80013e8:	08001463 	.word	0x08001463
 80013ec:	08001463 	.word	0x08001463
 80013f0:	08001463 	.word	0x08001463
 80013f4:	08001463 	.word	0x08001463
 80013f8:	08001411 	.word	0x08001411
 80013fc:	08001425 	.word	0x08001425
 8001400:	4a82      	ldr	r2, [pc, #520]	; (800160c <HAL_GPIO_Init+0x2d8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001406:	e02c      	b.n	8001462 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e029      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	3304      	adds	r3, #4
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e024      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	3308      	adds	r3, #8
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e01f      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	330c      	adds	r3, #12
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e01a      	b.n	8001464 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001436:	2304      	movs	r3, #4
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e013      	b.n	8001464 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	611a      	str	r2, [r3, #16]
          break;
 800144e:	e009      	b.n	8001464 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	615a      	str	r2, [r3, #20]
          break;
 800145a:	e003      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x130>
          break;
 8001462:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d801      	bhi.n	800146e <HAL_GPIO_Init+0x13a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_Init+0x13e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d802      	bhi.n	8001480 <HAL_GPIO_Init+0x14c>
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x152>
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	3b08      	subs	r3, #8
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	210f      	movs	r1, #15
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8090 	beq.w	80015d4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b4:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_GPIO_Init+0x2dc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014cc:	4a51      	ldr	r2, [pc, #324]	; (8001614 <HAL_GPIO_Init+0x2e0>)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a49      	ldr	r2, [pc, #292]	; (8001618 <HAL_GPIO_Init+0x2e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00d      	beq.n	8001514 <HAL_GPIO_Init+0x1e0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a48      	ldr	r2, [pc, #288]	; (800161c <HAL_GPIO_Init+0x2e8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x1dc>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a47      	ldr	r2, [pc, #284]	; (8001620 <HAL_GPIO_Init+0x2ec>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_GPIO_Init+0x1d8>
 8001508:	2302      	movs	r3, #2
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x1e2>
 800150c:	2303      	movs	r3, #3
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x1e2>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x1e2>
 8001514:	2300      	movs	r3, #0
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001526:	493b      	ldr	r1, [pc, #236]	; (8001614 <HAL_GPIO_Init+0x2e0>)
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	4937      	ldr	r1, [pc, #220]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4933      	ldr	r1, [pc, #204]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001558:	4013      	ands	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	492d      	ldr	r1, [pc, #180]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4929      	ldr	r1, [pc, #164]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001580:	4013      	ands	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4923      	ldr	r1, [pc, #140]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	491f      	ldr	r1, [pc, #124]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4919      	ldr	r1, [pc, #100]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4915      	ldr	r1, [pc, #84]	; (8001624 <HAL_GPIO_Init+0x2f0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	3301      	adds	r3, #1
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f47f aeaf 	bne.w	8001348 <HAL_GPIO_Init+0x14>
  }
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	372c      	adds	r7, #44	; 0x2c
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	10320000 	.word	0x10320000
 80015fc:	10310000 	.word	0x10310000
 8001600:	10220000 	.word	0x10220000
 8001604:	10210000 	.word	0x10210000
 8001608:	10120000 	.word	0x10120000
 800160c:	10110000 	.word	0x10110000
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	40010800 	.word	0x40010800
 800161c:	40010c00 	.word	0x40010c00
 8001620:	40011000 	.word	0x40011000
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e001      	b.n	800164a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001666:	787b      	ldrb	r3, [r7, #1]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166c:	887a      	ldrh	r2, [r7, #2]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001672:	e003      	b.n	800167c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	041a      	lsls	r2, r3, #16
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	611a      	str	r2, [r3, #16]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4013      	ands	r3, r2
 800169e:	041a      	lsls	r2, r3, #16
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	400b      	ands	r3, r1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e26c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8087 	beq.w	80017e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e4:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d112      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
 80016f0:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d10b      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	4b89      	ldr	r3, [pc, #548]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x12c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d168      	bne.n	80017e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e246      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x76>
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a77      	ldr	r2, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0xbc>
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a71      	ldr	r2, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001774:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fcb6 	bl	8001104 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fcb2 	bl	8001104 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1fa      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xe4>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fca2 	bl	8001104 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fc9e 	bl	8001104 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1e6      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x10c>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1ba      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4939      	ldr	r1, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fc57 	bl	8001104 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fc53 	bl	8001104 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e19b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fc36 	bl	8001104 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fc32 	bl	8001104 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e17a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d03a      	beq.n	800193c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d019      	beq.n	8001902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x274>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc16 	bl	8001104 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fc12 	bl	8001104 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e15a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 fa9a 	bl	8001e34 <RCC_Delay>
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x274>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fbfc 	bl	8001104 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fbf8 	bl	8001104 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d908      	bls.n	8001930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e140      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	42420000 	.word	0x42420000
 800192c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b9e      	ldr	r3, [pc, #632]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e9      	bne.n	8001910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a6 	beq.w	8001a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b97      	ldr	r3, [pc, #604]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b94      	ldr	r3, [pc, #592]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a93      	ldr	r2, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b91      	ldr	r3, [pc, #580]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b8e      	ldr	r3, [pc, #568]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff fbb9 	bl	8001104 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff fbb5 	bl	8001104 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0fd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x312>
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x334>
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a72      	ldr	r2, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x356>
 80019f4:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a6c      	ldr	r2, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b64      	ldr	r3, [pc, #400]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a63      	ldr	r2, [pc, #396]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb69 	bl	8001104 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb65 	bl	8001104 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ab      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x37e>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fb53 	bl	8001104 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fb4f 	bl	8001104 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e095      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8081 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d061      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d146      	bne.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb23 	bl	8001104 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff fb1f 	bl	8001104 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e067      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	492d      	ldr	r1, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a19      	ldr	r1, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	4927      	ldr	r1, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff faf3 	bl	8001104 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff faef 	bl	8001104 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e037      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46a>
 8001b40:	e02f      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fadc 	bl	8001104 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fad8 	bl	8001104 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e020      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x498>
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e013      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42420060 	.word	0x42420060

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff fa2c 	bl	8001104 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff fa28 	bl	8001104 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f98a 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080026c0 	.word	0x080026c0
 8001d84:	20000018 	.word	0x20000018
 8001d88:	2000001c 	.word	0x2000001c

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e027      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	fb02 f203 	mul.w	r2, r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	693b      	ldr	r3, [r7, #16]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	080026d0 	.word	0x080026d0
 8001e2c:	080026e0 	.word	0x080026e0
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <RCC_Delay+0x34>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <RCC_Delay+0x38>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0a5b      	lsrs	r3, r3, #9
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e50:	bf00      	nop
  }
  while (Delay --);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	60fa      	str	r2, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <RCC_Delay+0x1c>
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000018 	.word	0x20000018
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e041      	b.n	8001f06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe ff4c 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 fa56 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e035      	b.n	8001f94 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_TIM_Base_Start_IT+0x90>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d009      	beq.n	8001f5e <HAL_TIM_Base_Start_IT+0x4e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f52:	d004      	beq.n	8001f5e <HAL_TIM_Base_Start_IT+0x4e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_TIM_Base_Start_IT+0x94>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d111      	bne.n	8001f82 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b06      	cmp	r3, #6
 8001f6e:	d010      	beq.n	8001f92 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f80:	e007      	b.n	8001f92 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d020      	beq.n	800200c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01b      	beq.n	800200c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f998 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f98b 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f99a 	bl	800233a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d020      	beq.n	8002058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0204 	mvn.w	r2, #4
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f972 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f965 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f974 	bl	800233a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0208 	mvn.w	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2204      	movs	r2, #4
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f94c 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f93f 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f94e 	bl	800233a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0210 	mvn.w	r2, #16
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2208      	movs	r2, #8
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f926 	bl	8002328 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f919 	bl	8002316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f928 	bl	800233a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fd68 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa6f 	bl	8002616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8f8 	bl	800234c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00c      	beq.n	8002180 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0220 	mvn.w	r2, #32
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa42 	bl	8002604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x1c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0b4      	b.n	800230e <HAL_TIM_ConfigClockSource+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd4>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	f000 8086 	beq.w	80022fa <HAL_TIM_ConfigClockSource+0x172>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xa6>
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xfa>
 8002208:	2b50      	cmp	r3, #80	; 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f000 f96a 	bl	8002516 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04f      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f000 f953 	bl	8002516 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f000 f8ca 	bl	8002428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f921 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f8e8 	bl	8002484 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	; 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f911 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f8aa 	bl	8002428 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f901 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00c      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 f8f8 	bl	80024e2 <TIM_ITRx_SetConfig>
      break;
 80022f2:	e003      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e000      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
	...

08002360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <TIM_Base_SetConfig+0xc0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <TIM_Base_SetConfig+0x28>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d003      	beq.n	8002388 <TIM_Base_SetConfig+0x28>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a28      	ldr	r2, [pc, #160]	; (8002424 <TIM_Base_SetConfig+0xc4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d108      	bne.n	800239a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a20      	ldr	r2, [pc, #128]	; (8002420 <TIM_Base_SetConfig+0xc0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <TIM_Base_SetConfig+0x52>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d003      	beq.n	80023b2 <TIM_Base_SetConfig+0x52>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <TIM_Base_SetConfig+0xc4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <TIM_Base_SetConfig+0xc0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d103      	bne.n	80023f8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f023 0201 	bic.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]
  }
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400

08002428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f023 030a 	bic.w	r3, r3, #10
 8002464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f023 0210 	bic.w	r2, r3, #16
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	031b      	lsls	r3, r3, #12
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	621a      	str	r2, [r3, #32]
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	f043 0307 	orr.w	r3, r3, #7
 8002504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002516:	b480      	push	{r7}
 8002518:	b087      	sub	sp, #28
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002530:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	021a      	lsls	r2, r3, #8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4313      	orrs	r3, r2
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002568:	2302      	movs	r3, #2
 800256a:	e041      	b.n	80025f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a14      	ldr	r2, [pc, #80]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d004      	beq.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10c      	bne.n	80025de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400

08002604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <__libc_init_array>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	2600      	movs	r6, #0
 800262c:	4d0c      	ldr	r5, [pc, #48]	; (8002660 <__libc_init_array+0x38>)
 800262e:	4c0d      	ldr	r4, [pc, #52]	; (8002664 <__libc_init_array+0x3c>)
 8002630:	1b64      	subs	r4, r4, r5
 8002632:	10a4      	asrs	r4, r4, #2
 8002634:	42a6      	cmp	r6, r4
 8002636:	d109      	bne.n	800264c <__libc_init_array+0x24>
 8002638:	f000 f822 	bl	8002680 <_init>
 800263c:	2600      	movs	r6, #0
 800263e:	4d0a      	ldr	r5, [pc, #40]	; (8002668 <__libc_init_array+0x40>)
 8002640:	4c0a      	ldr	r4, [pc, #40]	; (800266c <__libc_init_array+0x44>)
 8002642:	1b64      	subs	r4, r4, r5
 8002644:	10a4      	asrs	r4, r4, #2
 8002646:	42a6      	cmp	r6, r4
 8002648:	d105      	bne.n	8002656 <__libc_init_array+0x2e>
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002650:	4798      	blx	r3
 8002652:	3601      	adds	r6, #1
 8002654:	e7ee      	b.n	8002634 <__libc_init_array+0xc>
 8002656:	f855 3b04 	ldr.w	r3, [r5], #4
 800265a:	4798      	blx	r3
 800265c:	3601      	adds	r6, #1
 800265e:	e7f2      	b.n	8002646 <__libc_init_array+0x1e>
 8002660:	080026e4 	.word	0x080026e4
 8002664:	080026e4 	.word	0x080026e4
 8002668:	080026e4 	.word	0x080026e4
 800266c:	080026e8 	.word	0x080026e8

08002670 <memset>:
 8002670:	4603      	mov	r3, r0
 8002672:	4402      	add	r2, r0
 8002674:	4293      	cmp	r3, r2
 8002676:	d100      	bne.n	800267a <memset+0xa>
 8002678:	4770      	bx	lr
 800267a:	f803 1b01 	strb.w	r1, [r3], #1
 800267e:	e7f9      	b.n	8002674 <memset+0x4>

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
