
lab3main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800273c  0800273c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800273c  0800273c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800273c  0800273c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000024  08002768  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002768  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c03  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7b  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017094  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c748  00000000  00000000  00043d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082611  00000000  00000000  000504b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002914  00000000  00000000  000d2b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080026d8 	.word	0x080026d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080026d8 	.word	0x080026d8

0800014c <isButtonPressed>:
    	button_flag[i] = 0;
    	button_longPress_flag[i] = 0;
    }
}

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}

	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c

08000180 <getKeyInput>:

	return 0;
}

// Get key input and debounce buttons
void getKeyInput() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a4a      	ldr	r2, [pc, #296]	; (80002b8 <getKeyInput+0x138>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4949      	ldr	r1, [pc, #292]	; (80002bc <getKeyInput+0x13c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a48      	ldr	r2, [pc, #288]	; (80002c0 <getKeyInput+0x140>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4944      	ldr	r1, [pc, #272]	; (80002b8 <getKeyInput+0x138>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}

    // Get buttons input
    KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	4841      	ldr	r0, [pc, #260]	; (80002c4 <getKeyInput+0x144>)
 80001be:	f001 fa5f 	bl	8001680 <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b3e      	ldr	r3, [pc, #248]	; (80002c0 <getKeyInput+0x140>)
 80001c8:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	483d      	ldr	r0, [pc, #244]	; (80002c4 <getKeyInput+0x144>)
 80001d0:	f001 fa56 	bl	8001680 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b39      	ldr	r3, [pc, #228]	; (80002c0 <getKeyInput+0x140>)
 80001da:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4838      	ldr	r0, [pc, #224]	; (80002c4 <getKeyInput+0x144>)
 80001e2:	f001 fa4d 	bl	8001680 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b35      	ldr	r3, [pc, #212]	; (80002c0 <getKeyInput+0x140>)
 80001ec:	609a      	str	r2, [r3, #8]

    for (int i = 0; i < 3; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e058      	b.n	80002a6 <getKeyInput+0x126>
	    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) { // If no bouncing
 80001f4:	4a30      	ldr	r2, [pc, #192]	; (80002b8 <getKeyInput+0x138>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	4930      	ldr	r1, [pc, #192]	; (80002c0 <getKeyInput+0x140>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d14b      	bne.n	80002a0 <getKeyInput+0x120>
 8000208:	4a2b      	ldr	r2, [pc, #172]	; (80002b8 <getKeyInput+0x138>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	492a      	ldr	r1, [pc, #168]	; (80002bc <getKeyInput+0x13c>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d141      	bne.n	80002a0 <getKeyInput+0x120>
	        if (KeyReg2[i] != KeyReg3[i]) {
 800021c:	4a27      	ldr	r2, [pc, #156]	; (80002bc <getKeyInput+0x13c>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4928      	ldr	r1, [pc, #160]	; (80002c8 <getKeyInput+0x148>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d018      	beq.n	8000262 <getKeyInput+0xe2>
	            KeyReg3[i] = KeyReg2[i];
 8000230:	4a22      	ldr	r2, [pc, #136]	; (80002bc <getKeyInput+0x13c>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	4923      	ldr	r1, [pc, #140]	; (80002c8 <getKeyInput+0x148>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	            if (KeyReg3[i] == PRESSED_STATE) {
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <getKeyInput+0x148>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d129      	bne.n	80002a0 <getKeyInput+0x120>
	    	        button_flag[i] = 1;
 800024c:	4a1f      	ldr	r2, [pc, #124]	; (80002cc <getKeyInput+0x14c>)
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2101      	movs	r1, #1
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	        TimeOutForKeyPress[i] = 200;
 8000256:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <getKeyInput+0x150>)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	21c8      	movs	r1, #200	; 0xc8
 800025c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000260:	e01e      	b.n	80002a0 <getKeyInput+0x120>
	            }

	        } else {
	    	    TimeOutForKeyPress[i]--;
 8000262:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <getKeyInput+0x150>)
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	1e5a      	subs	r2, r3, #1
 800026c:	4918      	ldr	r1, [pc, #96]	; (80002d0 <getKeyInput+0x150>)
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	            if (TimeOutForKeyPress[i] == 0) {
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <getKeyInput+0x150>)
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d10f      	bne.n	80002a0 <getKeyInput+0x120>
	        	    TimeOutForKeyPress[i] = 200;
 8000280:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <getKeyInput+0x150>)
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	21c8      	movs	r1, #200	; 0xc8
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	        	    if (KeyReg3[i] == PRESSED_STATE) {
 800028a:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <getKeyInput+0x148>)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d104      	bne.n	80002a0 <getKeyInput+0x120>
	    			    button_longPress_flag[i] = 1;
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <getKeyInput+0x154>)
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	2101      	movs	r1, #1
 800029c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	3301      	adds	r3, #1
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	dda3      	ble.n	80001f4 <getKeyInput+0x74>
	        	    }
	            }
	        }
	    }
    }
}
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000068 	.word	0x20000068
 80002bc:	20000098 	.word	0x20000098
 80002c0:	2000005c 	.word	0x2000005c
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	20000050 	.word	0x20000050
 80002cc:	2000008c 	.word	0x2000008c
 80002d0:	20000074 	.word	0x20000074
 80002d4:	20000080 	.word	0x20000080

080002d8 <display7SEG>:
#include "fsm_auto.h"

int turn = 0;

void display7SEG(int tenInt, int unitInt)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b08e      	sub	sp, #56	; 0x38
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
    // Array of segment patterns for numbers 0 - 9
    int segment_patterns[10] = {
 80002e2:	4b60      	ldr	r3, [pc, #384]	; (8000464 <display7SEG+0x18c>)
 80002e4:	f107 0408 	add.w	r4, r7, #8
 80002e8:	461d      	mov	r5, r3
 80002ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002f6:	e884 0003 	stmia.w	r4, {r0, r1}
    	     0b00000000, // 8: all segments
             0b00010000  // 9: segments a, b, c, d, f, g
    };

    // Get the segment pattern for the given number
    int pattern1 = segment_patterns[tenInt];
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000302:	4413      	add	r3, r2
 8000304:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000308:	637b      	str	r3, [r7, #52]	; 0x34
    int pattern2 = segment_patterns[unitInt];
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000312:	4413      	add	r3, r2
 8000314:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000318:	633b      	str	r3, [r7, #48]	; 0x30

    // Set each segment based on the pattern
    HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, (pattern1 & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 0
 800031a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800031c:	b2db      	uxtb	r3, r3
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	2180      	movs	r1, #128	; 0x80
 8000328:	484f      	ldr	r0, [pc, #316]	; (8000468 <display7SEG+0x190>)
 800032a:	f001 f9c0 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, (pattern1 & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 1
 800032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000330:	105b      	asrs	r3, r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4849      	ldr	r0, [pc, #292]	; (8000468 <display7SEG+0x190>)
 8000342:	f001 f9b4 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, (pattern1 & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 2
 8000346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000348:	109b      	asrs	r3, r3, #2
 800034a:	b2db      	uxtb	r3, r3
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	b2db      	uxtb	r3, r3
 8000352:	461a      	mov	r2, r3
 8000354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000358:	4843      	ldr	r0, [pc, #268]	; (8000468 <display7SEG+0x190>)
 800035a:	f001 f9a8 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, (pattern1 & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 3
 800035e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000360:	10db      	asrs	r3, r3, #3
 8000362:	b2db      	uxtb	r3, r3
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000370:	483d      	ldr	r0, [pc, #244]	; (8000468 <display7SEG+0x190>)
 8000372:	f001 f99c 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, (pattern1 & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 4
 8000376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000378:	111b      	asrs	r3, r3, #4
 800037a:	b2db      	uxtb	r3, r3
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000388:	4837      	ldr	r0, [pc, #220]	; (8000468 <display7SEG+0x190>)
 800038a:	f001 f990 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, (pattern1 & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 5
 800038e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000390:	115b      	asrs	r3, r3, #5
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	b2db      	uxtb	r3, r3
 800039a:	461a      	mov	r2, r3
 800039c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a0:	4831      	ldr	r0, [pc, #196]	; (8000468 <display7SEG+0x190>)
 80003a2:	f001 f984 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, (pattern1 & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 6
 80003a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003a8:	119b      	asrs	r3, r3, #6
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b8:	482b      	ldr	r0, [pc, #172]	; (8000468 <display7SEG+0x190>)
 80003ba:	f001 f978 	bl	80016ae <HAL_GPIO_WritePin>


    HAL_GPIO_WritePin(SEG_01_GPIO_Port, SEG_01_Pin, (pattern2 & 0b00000001) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 0
 80003be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ce:	4826      	ldr	r0, [pc, #152]	; (8000468 <display7SEG+0x190>)
 80003d0:	f001 f96d 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, (pattern2 & 0b00000010) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 1
 80003d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e6:	4820      	ldr	r0, [pc, #128]	; (8000468 <display7SEG+0x190>)
 80003e8:	f001 f961 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_21_GPIO_Port, SEG_21_Pin, (pattern2 & 0b00000100) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 2
 80003ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003ee:	109b      	asrs	r3, r3, #2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	2101      	movs	r1, #1
 80003fc:	481b      	ldr	r0, [pc, #108]	; (800046c <display7SEG+0x194>)
 80003fe:	f001 f956 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_31_GPIO_Port, SEG_31_Pin, (pattern2 & 0b00001000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 3
 8000402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000404:	10db      	asrs	r3, r3, #3
 8000406:	b2db      	uxtb	r3, r3
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	b2db      	uxtb	r3, r3
 800040e:	461a      	mov	r2, r3
 8000410:	2102      	movs	r1, #2
 8000412:	4816      	ldr	r0, [pc, #88]	; (800046c <display7SEG+0x194>)
 8000414:	f001 f94b 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_41_GPIO_Port, SEG_41_Pin, (pattern2 & 0b00010000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 4
 8000418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800041a:	111b      	asrs	r3, r3, #4
 800041c:	b2db      	uxtb	r3, r3
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	461a      	mov	r2, r3
 8000426:	2104      	movs	r1, #4
 8000428:	4810      	ldr	r0, [pc, #64]	; (800046c <display7SEG+0x194>)
 800042a:	f001 f940 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_51_GPIO_Port, SEG_51_Pin, (pattern2 & 0b00100000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 5
 800042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000430:	115b      	asrs	r3, r3, #5
 8000432:	b2db      	uxtb	r3, r3
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	b2db      	uxtb	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	2108      	movs	r1, #8
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <display7SEG+0x194>)
 8000440:	f001 f935 	bl	80016ae <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_61_GPIO_Port, SEG_61_Pin, (pattern2 & 0b01000000) ? GPIO_PIN_SET : GPIO_PIN_RESET); // Segment 6
 8000444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000446:	119b      	asrs	r3, r3, #6
 8000448:	b2db      	uxtb	r3, r3
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	b2db      	uxtb	r3, r3
 8000450:	461a      	mov	r2, r3
 8000452:	2110      	movs	r1, #16
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <display7SEG+0x194>)
 8000456:	f001 f92a 	bl	80016ae <HAL_GPIO_WritePin>
}
 800045a:	bf00      	nop
 800045c:	3738      	adds	r7, #56	; 0x38
 800045e:	46bd      	mov	sp, r7
 8000460:	bdb0      	pop	{r4, r5, r7, pc}
 8000462:	bf00      	nop
 8000464:	080026f0 	.word	0x080026f0
 8000468:	40010800 	.word	0x40010800
 800046c:	40010c00 	.word	0x40010c00

08000470 <displayAll7SEG>:


void displayAll7SEG() { // For displaying mode 1
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	if (timer_flag[3] == 1) { // Timer is set on main function
 8000474:	4b2d      	ldr	r3, [pc, #180]	; (800052c <displayAll7SEG+0xbc>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d10e      	bne.n	800049a <displayAll7SEG+0x2a>
		setTimer(3, 500);
 800047c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000480:	2003      	movs	r0, #3
 8000482:	f000 fc11 	bl	8000ca8 <setTimer>
		turn = !turn;
 8000486:	4b2a      	ldr	r3, [pc, #168]	; (8000530 <displayAll7SEG+0xc0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	4b26      	ldr	r3, [pc, #152]	; (8000530 <displayAll7SEG+0xc0>)
 8000498:	601a      	str	r2, [r3, #0]
	}

	// Toggle the displayed segment
	if (turn == 0) {
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <displayAll7SEG+0xc0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d121      	bne.n	80004e6 <displayAll7SEG+0x76>
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	2140      	movs	r1, #64	; 0x40
 80004a6:	4823      	ldr	r0, [pc, #140]	; (8000534 <displayAll7SEG+0xc4>)
 80004a8:	f001 f901 	bl	80016ae <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	4820      	ldr	r0, [pc, #128]	; (8000534 <displayAll7SEG+0xc4>)
 80004b2:	f001 f8fc 	bl	80016ae <HAL_GPIO_WritePin>
	    display7SEG(SEGvalue1 / 10, SEGvalue1 % 10);
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <displayAll7SEG+0xc8>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a20      	ldr	r2, [pc, #128]	; (800053c <displayAll7SEG+0xcc>)
 80004bc:	fb82 1203 	smull	r1, r2, r2, r3
 80004c0:	1092      	asrs	r2, r2, #2
 80004c2:	17db      	asrs	r3, r3, #31
 80004c4:	1ad0      	subs	r0, r2, r3
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <displayAll7SEG+0xc8>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <displayAll7SEG+0xcc>)
 80004cc:	fb83 1302 	smull	r1, r3, r3, r2
 80004d0:	1099      	asrs	r1, r3, #2
 80004d2:	17d3      	asrs	r3, r2, #31
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	440b      	add	r3, r1
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	1ad1      	subs	r1, r2, r3
 80004e0:	f7ff fefa 	bl	80002d8 <display7SEG>
	} else {
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
	    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
	    display7SEG(SEGvalue2 / 10, SEGvalue2 % 10);
	}
}
 80004e4:	e020      	b.n	8000528 <displayAll7SEG+0xb8>
	    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <displayAll7SEG+0xc4>)
 80004ec:	f001 f8df 	bl	80016ae <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	480f      	ldr	r0, [pc, #60]	; (8000534 <displayAll7SEG+0xc4>)
 80004f6:	f001 f8da 	bl	80016ae <HAL_GPIO_WritePin>
	    display7SEG(SEGvalue2 / 10, SEGvalue2 % 10);
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <displayAll7SEG+0xd0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <displayAll7SEG+0xcc>)
 8000500:	fb82 1203 	smull	r1, r2, r2, r3
 8000504:	1092      	asrs	r2, r2, #2
 8000506:	17db      	asrs	r3, r3, #31
 8000508:	1ad0      	subs	r0, r2, r3
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <displayAll7SEG+0xd0>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <displayAll7SEG+0xcc>)
 8000510:	fb83 1302 	smull	r1, r3, r3, r2
 8000514:	1099      	asrs	r1, r3, #2
 8000516:	17d3      	asrs	r3, r2, #31
 8000518:	1ac9      	subs	r1, r1, r3
 800051a:	460b      	mov	r3, r1
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	440b      	add	r3, r1
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	1ad1      	subs	r1, r2, r3
 8000524:	f7ff fed8 	bl	80002d8 <display7SEG>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000d8 	.word	0x200000d8
 8000530:	20000040 	.word	0x20000040
 8000534:	40010c00 	.word	0x40010c00
 8000538:	200000a4 	.word	0x200000a4
 800053c:	66666667 	.word	0x66666667
 8000540:	20000104 	.word	0x20000104

08000544 <updateCurrentTimerValues>:
#include "traffic_light.h"
#include "softwareTimer.h"
#include "display_traffic7seg.h"
#include "button.h"

void updateCurrentTimerValues() {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

    // For Pair 1
    switch (status1) {
 8000548:	4b20      	ldr	r3, [pc, #128]	; (80005cc <updateCurrentTimerValues+0x88>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b06      	cmp	r3, #6
 800054e:	d00d      	beq.n	800056c <updateCurrentTimerValues+0x28>
 8000550:	2b06      	cmp	r3, #6
 8000552:	dc19      	bgt.n	8000588 <updateCurrentTimerValues+0x44>
 8000554:	2b02      	cmp	r3, #2
 8000556:	d002      	beq.n	800055e <updateCurrentTimerValues+0x1a>
 8000558:	2b04      	cmp	r3, #4
 800055a:	d00e      	beq.n	800057a <updateCurrentTimerValues+0x36>
 800055c:	e014      	b.n	8000588 <updateCurrentTimerValues+0x44>
        case AUTO_RED1:
            current_timer_value1 = getRemainingTime(0); // Timer ID 0 for Pair 1 Red
 800055e:	2000      	movs	r0, #0
 8000560:	f000 fbf2 	bl	8000d48 <getRemainingTime>
 8000564:	4603      	mov	r3, r0
 8000566:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <updateCurrentTimerValues+0x8c>)
 8000568:	6013      	str	r3, [r2, #0]
            break;
 800056a:	e00d      	b.n	8000588 <updateCurrentTimerValues+0x44>
        case AUTO_GREEN1:
            current_timer_value1 = getRemainingTime(0); // Timer ID 0 for Pair 1 Green
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fbeb 	bl	8000d48 <getRemainingTime>
 8000572:	4603      	mov	r3, r0
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <updateCurrentTimerValues+0x8c>)
 8000576:	6013      	str	r3, [r2, #0]
            break;
 8000578:	e006      	b.n	8000588 <updateCurrentTimerValues+0x44>
        case AUTO_YELLOW1:
            current_timer_value1 = getRemainingTime(0); // Timer ID 0 for Pair 1 Yellow
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fbe4 	bl	8000d48 <getRemainingTime>
 8000580:	4603      	mov	r3, r0
 8000582:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <updateCurrentTimerValues+0x8c>)
 8000584:	6013      	str	r3, [r2, #0]
            break;
 8000586:	bf00      	nop
    }

    // For Pair 2
    switch (status2) {
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <updateCurrentTimerValues+0x90>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b07      	cmp	r3, #7
 800058e:	d00d      	beq.n	80005ac <updateCurrentTimerValues+0x68>
 8000590:	2b07      	cmp	r3, #7
 8000592:	dc19      	bgt.n	80005c8 <updateCurrentTimerValues+0x84>
 8000594:	2b03      	cmp	r3, #3
 8000596:	d002      	beq.n	800059e <updateCurrentTimerValues+0x5a>
 8000598:	2b05      	cmp	r3, #5
 800059a:	d00e      	beq.n	80005ba <updateCurrentTimerValues+0x76>
            break;
        case AUTO_YELLOW2:
            current_timer_value2 = getRemainingTime(1); // Timer ID 1 for Pair 2 Yellow
            break;
    }
}
 800059c:	e014      	b.n	80005c8 <updateCurrentTimerValues+0x84>
            current_timer_value2 = getRemainingTime(1); // Timer ID 1 for Pair 2 Red
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fbd2 	bl	8000d48 <getRemainingTime>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <updateCurrentTimerValues+0x94>)
 80005a8:	6013      	str	r3, [r2, #0]
            break;
 80005aa:	e00d      	b.n	80005c8 <updateCurrentTimerValues+0x84>
            current_timer_value2 = getRemainingTime(1); // Timer ID 1 for Pair 2 Green
 80005ac:	2001      	movs	r0, #1
 80005ae:	f000 fbcb 	bl	8000d48 <getRemainingTime>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <updateCurrentTimerValues+0x94>)
 80005b6:	6013      	str	r3, [r2, #0]
            break;
 80005b8:	e006      	b.n	80005c8 <updateCurrentTimerValues+0x84>
            current_timer_value2 = getRemainingTime(1); // Timer ID 1 for Pair 2 Yellow
 80005ba:	2001      	movs	r0, #1
 80005bc:	f000 fbc4 	bl	8000d48 <getRemainingTime>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <updateCurrentTimerValues+0x94>)
 80005c4:	6013      	str	r3, [r2, #0]
            break;
 80005c6:	bf00      	nop
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000010 	.word	0x20000010
 80005d0:	20000048 	.word	0x20000048
 80005d4:	20000014 	.word	0x20000014
 80005d8:	2000004c 	.word	0x2000004c

080005dc <fsmAuto>:

void fsmAuto() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
     if (mode > 1) {
 80005e0:	4b69      	ldr	r3, [pc, #420]	; (8000788 <fsmAuto+0x1ac>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	dd06      	ble.n	80005f6 <fsmAuto+0x1a>
    	 status1 = SETTING_RED;
 80005e8:	4b68      	ldr	r3, [pc, #416]	; (800078c <fsmAuto+0x1b0>)
 80005ea:	220a      	movs	r2, #10
 80005ec:	601a      	str	r2, [r3, #0]
    	 status2 = SETTING_RED;
 80005ee:	4b68      	ldr	r3, [pc, #416]	; (8000790 <fsmAuto+0x1b4>)
 80005f0:	220a      	movs	r2, #10
 80005f2:	601a      	str	r2, [r3, #0]
    	 return;
 80005f4:	e0c7      	b.n	8000786 <fsmAuto+0x1aa>
     }

	// Update the timer values before each FSM cycle
	 updateCurrentTimerValues();
 80005f6:	f7ff ffa5 	bl	8000544 <updateCurrentTimerValues>

	 // Update SEGvalue1 and SEGvalue2 with remaining times
	 SEGvalue1 = (getRemainingTime(0) / 1000) + 1;  // For Pair 1
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fba4 	bl	8000d48 <getRemainingTime>
 8000600:	4603      	mov	r3, r0
 8000602:	4a64      	ldr	r2, [pc, #400]	; (8000794 <fsmAuto+0x1b8>)
 8000604:	fb82 1203 	smull	r1, r2, r2, r3
 8000608:	1192      	asrs	r2, r2, #6
 800060a:	17db      	asrs	r3, r3, #31
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	3301      	adds	r3, #1
 8000610:	4a61      	ldr	r2, [pc, #388]	; (8000798 <fsmAuto+0x1bc>)
 8000612:	6013      	str	r3, [r2, #0]
	 SEGvalue2 = (getRemainingTime(1) / 1000) + 1;  // For Pair 2
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fb97 	bl	8000d48 <getRemainingTime>
 800061a:	4603      	mov	r3, r0
 800061c:	4a5d      	ldr	r2, [pc, #372]	; (8000794 <fsmAuto+0x1b8>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1192      	asrs	r2, r2, #6
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	3301      	adds	r3, #1
 800062a:	4a5c      	ldr	r2, [pc, #368]	; (800079c <fsmAuto+0x1c0>)
 800062c:	6013      	str	r3, [r2, #0]

     displayAll7SEG();
 800062e:	f7ff ff1f 	bl	8000470 <displayAll7SEG>

    // FSM for Pair 1
    switch (status1) {
 8000632:	4b56      	ldr	r3, [pc, #344]	; (800078c <fsmAuto+0x1b0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	2b05      	cmp	r3, #5
 800063a:	d84e      	bhi.n	80006da <fsmAuto+0xfe>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <fsmAuto+0x68>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	0800065d 	.word	0x0800065d
 8000648:	08000671 	.word	0x08000671
 800064c:	080006db 	.word	0x080006db
 8000650:	080006b1 	.word	0x080006b1
 8000654:	080006db 	.word	0x080006db
 8000658:	08000691 	.word	0x08000691
    	case INIT:
             status1 = AUTO_RED1;       // Begin with Pair 1 in Red
 800065c:	4b4b      	ldr	r3, [pc, #300]	; (800078c <fsmAuto+0x1b0>)
 800065e:	2202      	movs	r2, #2
 8000660:	601a      	str	r2, [r3, #0]
             setTimer(0, redDuration);        // 5-second timer for Red on Pair 1
 8000662:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <fsmAuto+0x1c4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fb1d 	bl	8000ca8 <setTimer>
             break;
 800066e:	e034      	b.n	80006da <fsmAuto+0xfe>

        case AUTO_RED1:
            RED1();
 8000670:	f000 fc0c 	bl	8000e8c <RED1>
            if (timer_flag[0]) {           // Red timer for Pair 1 expires
 8000674:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <fsmAuto+0x1c8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d029      	beq.n	80006d0 <fsmAuto+0xf4>
                status1 = AUTO_GREEN1;
 800067c:	4b43      	ldr	r3, [pc, #268]	; (800078c <fsmAuto+0x1b0>)
 800067e:	2206      	movs	r2, #6
 8000680:	601a      	str	r2, [r3, #0]
                setTimer(0, greenDuration);         // 3-second timer for Green on Pair 1
 8000682:	4b49      	ldr	r3, [pc, #292]	; (80007a8 <fsmAuto+0x1cc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fb0d 	bl	8000ca8 <setTimer>
            }
            break;
 800068e:	e01f      	b.n	80006d0 <fsmAuto+0xf4>

        case AUTO_GREEN1:
            GREEN1();
 8000690:	f000 fc3c 	bl	8000f0c <GREEN1>
            if (timer_flag[0]) {           // Green timer for Pair 1 expires
 8000694:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <fsmAuto+0x1c8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01b      	beq.n	80006d4 <fsmAuto+0xf8>
                status1 = AUTO_YELLOW1;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <fsmAuto+0x1b0>)
 800069e:	2204      	movs	r2, #4
 80006a0:	601a      	str	r2, [r3, #0]
                setTimer(0, yellowDuration);         // 2-second timer for Yellow on Pair 1
 80006a2:	4b42      	ldr	r3, [pc, #264]	; (80007ac <fsmAuto+0x1d0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fafd 	bl	8000ca8 <setTimer>
            }
            break;
 80006ae:	e011      	b.n	80006d4 <fsmAuto+0xf8>

        case AUTO_YELLOW1:
            YELLOW1();
 80006b0:	f000 fc0c 	bl	8000ecc <YELLOW1>
            if (timer_flag[0]) {           // Yellow timer for Pair 1 expires
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <fsmAuto+0x1c8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00d      	beq.n	80006d8 <fsmAuto+0xfc>
                status1 = AUTO_RED1;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <fsmAuto+0x1b0>)
 80006be:	2202      	movs	r2, #2
 80006c0:	601a      	str	r2, [r3, #0]
                setTimer(0, redDuration);         // 5-second timer for Red on Pair 1
 80006c2:	4b37      	ldr	r3, [pc, #220]	; (80007a0 <fsmAuto+0x1c4>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4619      	mov	r1, r3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 faed 	bl	8000ca8 <setTimer>
            }
            break;
 80006ce:	e003      	b.n	80006d8 <fsmAuto+0xfc>
            break;
 80006d0:	bf00      	nop
 80006d2:	e002      	b.n	80006da <fsmAuto+0xfe>
            break;
 80006d4:	bf00      	nop
 80006d6:	e000      	b.n	80006da <fsmAuto+0xfe>
            break;
 80006d8:	bf00      	nop
    }


    // FSM for Pair 2
    switch (status2) {
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <fsmAuto+0x1b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d850      	bhi.n	8000786 <fsmAuto+0x1aa>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <fsmAuto+0x110>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	08000709 	.word	0x08000709
 80006f0:	08000787 	.word	0x08000787
 80006f4:	0800075d 	.word	0x0800075d
 80006f8:	08000787 	.word	0x08000787
 80006fc:	0800073d 	.word	0x0800073d
 8000700:	08000787 	.word	0x08000787
 8000704:	0800071d 	.word	0x0800071d
    	case INIT:
             status2 = AUTO_GREEN2;       // Begin with Pair 1 in Red
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <fsmAuto+0x1b4>)
 800070a:	2207      	movs	r2, #7
 800070c:	601a      	str	r2, [r3, #0]
             setTimer(1, greenDuration);        // 5-second timer for Red on Pair 1
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <fsmAuto+0x1cc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fac7 	bl	8000ca8 <setTimer>
             break;
 800071a:	e034      	b.n	8000786 <fsmAuto+0x1aa>

    	case AUTO_GREEN2:
    	     GREEN2();                // Turn on Green light for Pair 2
 800071c:	f000 fc06 	bl	8000f2c <GREEN2>
    	     if (timer_flag[1]) {     // Timer for Green expires
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <fsmAuto+0x1c8>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d029      	beq.n	800077c <fsmAuto+0x1a0>
    	         status2 = AUTO_YELLOW2;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <fsmAuto+0x1b4>)
 800072a:	2205      	movs	r2, #5
 800072c:	601a      	str	r2, [r3, #0]
    	         setTimer(1, yellowDuration);   // 2-second timer for Yellow
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <fsmAuto+0x1d0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fab7 	bl	8000ca8 <setTimer>
    	     }
    	     break;
 800073a:	e01f      	b.n	800077c <fsmAuto+0x1a0>

    	case AUTO_YELLOW2:
    	     YELLOW2();               // Turn on Yellow light for Pair 2
 800073c:	f000 fbd6 	bl	8000eec <YELLOW2>
    	     if (timer_flag[1]) {     // Timer for Yellow expires
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <fsmAuto+0x1c8>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d01b      	beq.n	8000780 <fsmAuto+0x1a4>
    	         status2 = AUTO_RED2;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <fsmAuto+0x1b4>)
 800074a:	2203      	movs	r2, #3
 800074c:	601a      	str	r2, [r3, #0]
    	         setTimer(1, redDuration);   // 5-second timer for Red
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <fsmAuto+0x1c4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	2001      	movs	r0, #1
 8000756:	f000 faa7 	bl	8000ca8 <setTimer>
    	     }
    	     break;
 800075a:	e011      	b.n	8000780 <fsmAuto+0x1a4>

    	case AUTO_RED2:
    	     RED2();                  // Turn on Red light for Pair 2
 800075c:	f000 fba6 	bl	8000eac <RED2>
    	     if (timer_flag[1]) {     // Timer for Red expires
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <fsmAuto+0x1c8>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00d      	beq.n	8000784 <fsmAuto+0x1a8>
    	         status2 = AUTO_GREEN2;  // Loop back to Green
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <fsmAuto+0x1b4>)
 800076a:	2207      	movs	r2, #7
 800076c:	601a      	str	r2, [r3, #0]
    	         setTimer(1, greenDuration);     // Reset 3-second timer for Green
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <fsmAuto+0x1cc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fa97 	bl	8000ca8 <setTimer>
    	     }
    	    break;
 800077a:	e003      	b.n	8000784 <fsmAuto+0x1a8>
    	     break;
 800077c:	bf00      	nop
 800077e:	e002      	b.n	8000786 <fsmAuto+0x1aa>
    	     break;
 8000780:	bf00      	nop
 8000782:	e000      	b.n	8000786 <fsmAuto+0x1aa>
    	    break;
 8000784:	bf00      	nop
    }

}
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000000 	.word	0x20000000
 800078c:	20000010 	.word	0x20000010
 8000790:	20000014 	.word	0x20000014
 8000794:	10624dd3 	.word	0x10624dd3
 8000798:	200000a4 	.word	0x200000a4
 800079c:	20000104 	.word	0x20000104
 80007a0:	20000004 	.word	0x20000004
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	2000000c 	.word	0x2000000c
 80007ac:	20000008 	.word	0x20000008

080007b0 <fsmSetting>:
#include "softwareTimer.h"
#include "display_traffic7seg.h"
#include "button.h"
#include "fsm_auto.h"

void fsmSetting() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if (previousMode == 4 && mode == 1) {
 80007b4:	4b91      	ldr	r3, [pc, #580]	; (80009fc <fsmSetting+0x24c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d107      	bne.n	80007cc <fsmSetting+0x1c>
 80007bc:	4b90      	ldr	r3, [pc, #576]	; (8000a00 <fsmSetting+0x250>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d103      	bne.n	80007cc <fsmSetting+0x1c>
		status1 = INIT;
 80007c4:	4b8f      	ldr	r3, [pc, #572]	; (8000a04 <fsmSetting+0x254>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
		return;
 80007ca:	e116      	b.n	80009fa <fsmSetting+0x24a>
	}

    displayAll7SEG(); // Scanning display for both pairs
 80007cc:	f7ff fe50 	bl	8000470 <displayAll7SEG>

    switch (mode) {
 80007d0:	4b8b      	ldr	r3, [pc, #556]	; (8000a00 <fsmSetting+0x250>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	f000 80b7 	beq.w	8000948 <fsmSetting+0x198>
 80007da:	2b04      	cmp	r3, #4
 80007dc:	f300 810d 	bgt.w	80009fa <fsmSetting+0x24a>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d002      	beq.n	80007ea <fsmSetting+0x3a>
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d059      	beq.n	800089c <fsmSetting+0xec>
 80007e8:	e107      	b.n	80009fa <fsmSetting+0x24a>
        case 2: // Mode 2 - Modify Red LED duration
            RedBlinky();  // Blink all single red LEDs as required
 80007ea:	f000 fbaf 	bl	8000f4c <RedBlinky>
            if (isButtonPressed(1)) {
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff fcac 	bl	800014c <isButtonPressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d013      	beq.n	8000822 <fsmSetting+0x72>
                // Button 2 increases value for red duration without saving
                redIncreaseValue = redIncreaseValue + 1000;
 80007fa:	4b83      	ldr	r3, [pc, #524]	; (8000a08 <fsmSetting+0x258>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000802:	4a81      	ldr	r2, [pc, #516]	; (8000a08 <fsmSetting+0x258>)
 8000804:	6013      	str	r3, [r2, #0]
                if (redIncreaseValue + redDuration > 99000) redIncreaseValue = 1000 - redDuration;
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <fsmSetting+0x258>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4b80      	ldr	r3, [pc, #512]	; (8000a0c <fsmSetting+0x25c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a7f      	ldr	r2, [pc, #508]	; (8000a10 <fsmSetting+0x260>)
 8000812:	4293      	cmp	r3, r2
 8000814:	dd05      	ble.n	8000822 <fsmSetting+0x72>
 8000816:	4b7d      	ldr	r3, [pc, #500]	; (8000a0c <fsmSetting+0x25c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800081e:	4a7a      	ldr	r2, [pc, #488]	; (8000a08 <fsmSetting+0x258>)
 8000820:	6013      	str	r3, [r2, #0]
            }
            if (isButtonPressed(2)) {
 8000822:	2002      	movs	r0, #2
 8000824:	f7ff fc92 	bl	800014c <isButtonPressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d013      	beq.n	8000856 <fsmSetting+0xa6>
                // Button 3 saves the current incremented value
                redDuration += redIncreaseValue;
 800082e:	4b77      	ldr	r3, [pc, #476]	; (8000a0c <fsmSetting+0x25c>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b75      	ldr	r3, [pc, #468]	; (8000a08 <fsmSetting+0x258>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a74      	ldr	r2, [pc, #464]	; (8000a0c <fsmSetting+0x25c>)
 800083a:	6013      	str	r3, [r2, #0]
                if (redDuration > 99000) redDuration = 1000;
 800083c:	4b73      	ldr	r3, [pc, #460]	; (8000a0c <fsmSetting+0x25c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a73      	ldr	r2, [pc, #460]	; (8000a10 <fsmSetting+0x260>)
 8000842:	4293      	cmp	r3, r2
 8000844:	dd03      	ble.n	800084e <fsmSetting+0x9e>
 8000846:	4b71      	ldr	r3, [pc, #452]	; (8000a0c <fsmSetting+0x25c>)
 8000848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084c:	601a      	str	r2, [r3, #0]
                redIncreaseValue = 0; // Reset the increase value after saving
 800084e:	4b6e      	ldr	r3, [pc, #440]	; (8000a08 <fsmSetting+0x258>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e002      	b.n	800085c <fsmSetting+0xac>
            } else {
            	redIncreaseValue = 0; //
 8000856:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <fsmSetting+0x258>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
            }
            // Display updated red duration on the 7-segment display
            SEGvalue1 = (redDuration + redIncreaseValue) / 1000;
 800085c:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <fsmSetting+0x25c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <fsmSetting+0x258>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4413      	add	r3, r2
 8000866:	4a6b      	ldr	r2, [pc, #428]	; (8000a14 <fsmSetting+0x264>)
 8000868:	fb82 1203 	smull	r1, r2, r2, r3
 800086c:	1192      	asrs	r2, r2, #6
 800086e:	17db      	asrs	r3, r3, #31
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	4a69      	ldr	r2, [pc, #420]	; (8000a18 <fsmSetting+0x268>)
 8000874:	6013      	str	r3, [r2, #0]
            SEGvalue2 = (redDuration + redIncreaseValue) % 1000;
 8000876:	4b65      	ldr	r3, [pc, #404]	; (8000a0c <fsmSetting+0x25c>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b63      	ldr	r3, [pc, #396]	; (8000a08 <fsmSetting+0x258>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	441a      	add	r2, r3
 8000880:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <fsmSetting+0x264>)
 8000882:	fb83 1302 	smull	r1, r3, r3, r2
 8000886:	1199      	asrs	r1, r3, #6
 8000888:	17d3      	asrs	r3, r2, #31
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000890:	fb01 f303 	mul.w	r3, r1, r3
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	4a61      	ldr	r2, [pc, #388]	; (8000a1c <fsmSetting+0x26c>)
 8000898:	6013      	str	r3, [r2, #0]
            break;
 800089a:	e0ae      	b.n	80009fa <fsmSetting+0x24a>

        case 3: // Mode 3 - Modify Yellow LED duration
            YellowBlinky(); // Blink all single amber LEDs
 800089c:	f000 fb84 	bl	8000fa8 <YellowBlinky>
            if (isButtonPressed(1)) {
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fc53 	bl	800014c <isButtonPressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d013      	beq.n	80008d4 <fsmSetting+0x124>
                yellowIncreaseValue = yellowIncreaseValue + 1000;
 80008ac:	4b5c      	ldr	r3, [pc, #368]	; (8000a20 <fsmSetting+0x270>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008b4:	4a5a      	ldr	r2, [pc, #360]	; (8000a20 <fsmSetting+0x270>)
 80008b6:	6013      	str	r3, [r2, #0]
                if (yellowIncreaseValue + yellowDuration > 99000) yellowIncreaseValue = 1000 - yellowDuration;
 80008b8:	4b59      	ldr	r3, [pc, #356]	; (8000a20 <fsmSetting+0x270>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <fsmSetting+0x274>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a53      	ldr	r2, [pc, #332]	; (8000a10 <fsmSetting+0x260>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	dd05      	ble.n	80008d4 <fsmSetting+0x124>
 80008c8:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <fsmSetting+0x274>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80008d0:	4a53      	ldr	r2, [pc, #332]	; (8000a20 <fsmSetting+0x270>)
 80008d2:	6013      	str	r3, [r2, #0]
            }
            if (isButtonPressed(2)) {
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff fc39 	bl	800014c <isButtonPressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d010      	beq.n	8000902 <fsmSetting+0x152>
                yellowDuration = yellowIncreaseValue;
 80008e0:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <fsmSetting+0x270>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a4f      	ldr	r2, [pc, #316]	; (8000a24 <fsmSetting+0x274>)
 80008e6:	6013      	str	r3, [r2, #0]
                if (yellowDuration > 99000) yellowDuration = 1000;
 80008e8:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <fsmSetting+0x274>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a48      	ldr	r2, [pc, #288]	; (8000a10 <fsmSetting+0x260>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	dd03      	ble.n	80008fa <fsmSetting+0x14a>
 80008f2:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <fsmSetting+0x274>)
 80008f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f8:	601a      	str	r2, [r3, #0]
                yellowIncreaseValue = 0;
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <fsmSetting+0x270>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e002      	b.n	8000908 <fsmSetting+0x158>
            } else {
            	yellowIncreaseValue = 0; //
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <fsmSetting+0x270>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
            }

            SEGvalue1 = (yellowDuration + yellowIncreaseValue) / 1000;
 8000908:	4b46      	ldr	r3, [pc, #280]	; (8000a24 <fsmSetting+0x274>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <fsmSetting+0x270>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4413      	add	r3, r2
 8000912:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <fsmSetting+0x264>)
 8000914:	fb82 1203 	smull	r1, r2, r2, r3
 8000918:	1192      	asrs	r2, r2, #6
 800091a:	17db      	asrs	r3, r3, #31
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	4a3e      	ldr	r2, [pc, #248]	; (8000a18 <fsmSetting+0x268>)
 8000920:	6013      	str	r3, [r2, #0]
            SEGvalue2 = (yellowDuration + yellowIncreaseValue) % 1000;
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <fsmSetting+0x274>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <fsmSetting+0x270>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	441a      	add	r2, r3
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <fsmSetting+0x264>)
 800092e:	fb83 1302 	smull	r1, r3, r3, r2
 8000932:	1199      	asrs	r1, r3, #6
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	1acb      	subs	r3, r1, r3
 8000938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800093c:	fb01 f303 	mul.w	r3, r1, r3
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	4a36      	ldr	r2, [pc, #216]	; (8000a1c <fsmSetting+0x26c>)
 8000944:	6013      	str	r3, [r2, #0]
            break;
 8000946:	e058      	b.n	80009fa <fsmSetting+0x24a>

        case 4: // Mode 4 - Modify Green LED duration
            GreenBlinky(); // Blink all single green LEDs
 8000948:	f000 fb5c 	bl	8001004 <GreenBlinky>
            if (isButtonPressed(1)) {
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fbfd 	bl	800014c <isButtonPressed>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d013      	beq.n	8000980 <fsmSetting+0x1d0>
                greenIncreaseValue = greenIncreaseValue + 1000;
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <fsmSetting+0x278>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000960:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <fsmSetting+0x278>)
 8000962:	6013      	str	r3, [r2, #0]
                if (greenIncreaseValue + greenDuration > 99000) greenIncreaseValue = 1000 - greenDuration;
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <fsmSetting+0x278>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <fsmSetting+0x27c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4413      	add	r3, r2
 800096e:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <fsmSetting+0x260>)
 8000970:	4293      	cmp	r3, r2
 8000972:	dd05      	ble.n	8000980 <fsmSetting+0x1d0>
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <fsmSetting+0x27c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800097c:	4a2a      	ldr	r2, [pc, #168]	; (8000a28 <fsmSetting+0x278>)
 800097e:	6013      	str	r3, [r2, #0]
            }
            if (isButtonPressed(2)) {
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff fbe3 	bl	800014c <isButtonPressed>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d013      	beq.n	80009b4 <fsmSetting+0x204>
                greenDuration += greenIncreaseValue;
 800098c:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <fsmSetting+0x27c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <fsmSetting+0x278>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4413      	add	r3, r2
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <fsmSetting+0x27c>)
 8000998:	6013      	str	r3, [r2, #0]
                if (greenDuration > 99000) greenDuration = 1000;
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <fsmSetting+0x27c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <fsmSetting+0x260>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	dd03      	ble.n	80009ac <fsmSetting+0x1fc>
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <fsmSetting+0x27c>)
 80009a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009aa:	601a      	str	r2, [r3, #0]
                greenIncreaseValue = 0;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <fsmSetting+0x278>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e002      	b.n	80009ba <fsmSetting+0x20a>
            } else {
            	greenIncreaseValue = 0; //
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <fsmSetting+0x278>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
            }

            SEGvalue1 = (greenDuration + greenIncreaseValue) / 1000;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <fsmSetting+0x27c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <fsmSetting+0x278>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <fsmSetting+0x264>)
 80009c6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ca:	1192      	asrs	r2, r2, #6
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <fsmSetting+0x268>)
 80009d2:	6013      	str	r3, [r2, #0]
            SEGvalue2 = (greenDuration + greenIncreaseValue) % 1000;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <fsmSetting+0x27c>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <fsmSetting+0x278>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	441a      	add	r2, r3
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <fsmSetting+0x264>)
 80009e0:	fb83 1302 	smull	r1, r3, r3, r2
 80009e4:	1199      	asrs	r1, r3, #6
 80009e6:	17d3      	asrs	r3, r2, #31
 80009e8:	1acb      	subs	r3, r1, r3
 80009ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ee:	fb01 f303 	mul.w	r3, r1, r3
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <fsmSetting+0x26c>)
 80009f6:	6013      	str	r3, [r2, #0]
            break;
 80009f8:	bf00      	nop
    }
}
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000044 	.word	0x20000044
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000010 	.word	0x20000010
 8000a08:	20000100 	.word	0x20000100
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	000182b8 	.word	0x000182b8
 8000a14:	10624dd3 	.word	0x10624dd3
 8000a18:	200000a4 	.word	0x200000a4
 8000a1c:	20000104 	.word	0x20000104
 8000a20:	200000d4 	.word	0x200000d4
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000d0 	.word	0x200000d0
 8000a2c:	2000000c 	.word	0x2000000c

08000a30 <getMode>:
int greenDuration = 3000;    // Default 3 seconds

int current_timer_value1 = 0; // Holds the remaining time for Pair 1
int current_timer_value2 = 0; // Holds the remaining time for Pair 2

void getMode() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	if (isButtonPressed(0)) { // Assuming Button 1 is index 0
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fb89 	bl	800014c <isButtonPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d010      	beq.n	8000a62 <getMode+0x32>
	    mode++;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <getMode+0x38>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <getMode+0x38>)
 8000a48:	6013      	str	r3, [r2, #0]
	    previousMode = mode - 1;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <getMode+0x38>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <getMode+0x3c>)
 8000a52:	6013      	str	r3, [r2, #0]

	    if (mode > 4) {
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <getMode+0x38>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	dd02      	ble.n	8000a62 <getMode+0x32>
	    	mode = 1; // Loop back to Mode 1
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <getMode+0x38>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
	    }
	}
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000044 	.word	0x20000044

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 fb1a 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f81a 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000a7c:	f000 f854 	bl	8000b28 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000a80:	f000 f89e 	bl	8000bc0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <main+0x3c>)
 8000a86:	f001 fa6f 	bl	8001f68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(3, 500); // For 7seg display
 8000a8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 f90a 	bl	8000ca8 <setTimer>
  setTimer(4, 500); // For mode 2, 3, 4
 8000a94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a98:	2004      	movs	r0, #4
 8000a9a:	f000 f905 	bl	8000ca8 <setTimer>
  while (1)
  {

   getMode();
 8000a9e:	f7ff ffc7 	bl	8000a30 <getMode>

   fsmAuto();
 8000aa2:	f7ff fd9b 	bl	80005dc <fsmAuto>

   fsmSetting();
 8000aa6:	f7ff fe83 	bl	80007b0 <fsmSetting>
   getMode();
 8000aaa:	e7f8      	b.n	8000a9e <main+0x2e>
 8000aac:	20000108 	.word	0x20000108

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fe02 	bl	80026c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2310      	movs	r3, #16
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fe12 	bl	8001710 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000af2:	f000 f8d3 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f87e 	bl	8001c10 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f8bf 	bl	8000c9c <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3740      	adds	r7, #64	; 0x40
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b5c:	2209      	movs	r2, #9
 8000b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b6e:	f001 f9ab 	bl	8001ec8 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b78:	f000 f890 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000b8a:	f001 fb29 	bl	80021e0 <HAL_TIM_ConfigClockSource>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b94:	f000 f882 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_TIM2_Init+0x94>)
 8000ba6:	f001 fd01 	bl	80025ac <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f000 f874 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000108 	.word	0x20000108

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_GPIO_Init+0xb8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a27      	ldr	r2, [pc, #156]	; (8000c78 <MX_GPIO_Init+0xb8>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_GPIO_Init+0xb8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_GPIO_Init+0xb8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <MX_GPIO_Init+0xb8>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_GPIO_Init+0xb8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000c04:	2200      	movs	r2, #0
 8000c06:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <MX_GPIO_Init+0xbc>)
 8000c0c:	f000 fd4f 	bl	80016ae <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin|SEG_01_Pin|SEG_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_21_Pin|SEG_31_Pin|SEG_41_Pin|SEG_51_Pin
 8000c10:	2200      	movs	r2, #0
 8000c12:	21df      	movs	r1, #223	; 0xdf
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <MX_GPIO_Init+0xc0>)
 8000c16:	f000 fd4a 	bl	80016ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG_0_Pin SEG_1_Pin
                           SEG_2_Pin SEG_3_Pin SEG_4_Pin SEG_5_Pin
                           SEG_6_Pin SEG_01_Pin SEG_11_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000c1a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000c1e:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin|SEG_01_Pin|SEG_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	4812      	ldr	r0, [pc, #72]	; (8000c7c <MX_GPIO_Init+0xbc>)
 8000c34:	f000 fbaa 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_21_Pin SEG_31_Pin SEG_41_Pin SEG_51_Pin
                           SEG_61_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = SEG_21_Pin|SEG_31_Pin|SEG_41_Pin|SEG_51_Pin
 8000c38:	23df      	movs	r3, #223	; 0xdf
 8000c3a:	60bb      	str	r3, [r7, #8]
                          |SEG_61_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_GPIO_Init+0xc0>)
 8000c50:	f000 fb9c 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000c54:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_GPIO_Init+0xc0>)
 8000c6a:	f000 fb8f 	bl	800138c <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000c8c:	f000 f82c 	bl	8000ce8 <timer_run>
	getKeyInput();
 8000c90:	f7ff fa76 	bl	8000180 <getKeyInput>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <setTimer>:
 *
 */

#include "softwareTimer.h"

void setTimer(int index, int counter) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <setTimer+0x34>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <setTimer+0x38>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1092      	asrs	r2, r2, #2
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad2      	subs	r2, r2, r3
 8000cca:	4906      	ldr	r1, [pc, #24]	; (8000ce4 <setTimer+0x3c>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	200000d8 	.word	0x200000d8
 8000ce0:	66666667 	.word	0x66666667
 8000ce4:	200000a8 	.word	0x200000a8

08000ce8 <timer_run>:

void timer_run() {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e01c      	b.n	8000d2e <timer_run+0x46>
		 if (timer_counter[i] > 0) {
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <timer_run+0x58>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd13      	ble.n	8000d28 <timer_run+0x40>
			 timer_counter[i]--;
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <timer_run+0x58>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <timer_run+0x58>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 if (timer_counter[i] <= 0) {
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <timer_run+0x58>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dc04      	bgt.n	8000d28 <timer_run+0x40>
				 timer_flag[i] = 1;
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <timer_run+0x5c>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2101      	movs	r1, #1
 8000d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b09      	cmp	r3, #9
 8000d32:	dddf      	ble.n	8000cf4 <timer_run+0xc>
			}
		}
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	200000a8 	.word	0x200000a8
 8000d44:	200000d8 	.word	0x200000d8

08000d48 <getRemainingTime>:

int getRemainingTime(int index) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    return timer_counter[index] * TICK; // Convert back to actual time
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <getRemainingTime+0x24>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000a8 	.word	0x200000a8

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x5c>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_MspInit+0x60>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_MspInit+0x60>)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d113      	bne.n	8000e0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_TIM_Base_MspInit+0x44>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_TIM_Base_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_TIM_Base_MspInit+0x44>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	201c      	movs	r0, #28
 8000e04:	f000 fa8b 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e08:	201c      	movs	r0, #28
 8000e0a:	f000 faa4 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f969 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM2_IRQHandler+0x10>)
 8000e72:	f001 f8c5 	bl	8002000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000108 	.word	0x20000108

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <RED1>:
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
}

void RED1() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2104      	movs	r1, #4
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <RED1+0x1c>)
 8000e96:	f000 fc0a 	bl	80016ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <RED1+0x1c>)
 8000ea0:	f000 fc05 	bl	80016ae <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010800 	.word	0x40010800

08000eac <RED2>:

void RED2() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <RED2+0x1c>)
 8000eb6:	f000 fbfa 	bl	80016ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <RED2+0x1c>)
 8000ec0:	f000 fbf5 	bl	80016ae <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010800 	.word	0x40010800

08000ecc <YELLOW1>:

void YELLOW1() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <YELLOW1+0x1c>)
 8000ed6:	f000 fbea 	bl	80016ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <YELLOW1+0x1c>)
 8000ee0:	f000 fbe5 	bl	80016ae <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010800 	.word	0x40010800

08000eec <YELLOW2>:

void YELLOW2() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <YELLOW2+0x1c>)
 8000ef6:	f000 fbda 	bl	80016ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2120      	movs	r1, #32
 8000efe:	4802      	ldr	r0, [pc, #8]	; (8000f08 <YELLOW2+0x1c>)
 8000f00:	f000 fbd5 	bl	80016ae <HAL_GPIO_WritePin>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010800 	.word	0x40010800

08000f0c <GREEN1>:

void GREEN1() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <GREEN1+0x1c>)
 8000f16:	f000 fbca 	bl	80016ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	4802      	ldr	r0, [pc, #8]	; (8000f28 <GREEN1+0x1c>)
 8000f20:	f000 fbc5 	bl	80016ae <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40010800 	.word	0x40010800

08000f2c <GREEN2>:

void GREEN2() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2110      	movs	r1, #16
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <GREEN2+0x1c>)
 8000f36:	f000 fbba 	bl	80016ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	4802      	ldr	r0, [pc, #8]	; (8000f48 <GREEN2+0x1c>)
 8000f40:	f000 fbb5 	bl	80016ae <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010800 	.word	0x40010800

08000f4c <RedBlinky>:

void RedBlinky() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	if (timer_flag[4] == 1) {
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <RedBlinky+0x54>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d120      	bne.n	8000f9a <RedBlinky+0x4e>
		setTimer(4, 500);
 8000f58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff fea3 	bl	8000ca8 <setTimer>

		HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000f62:	2102      	movs	r1, #2
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <RedBlinky+0x58>)
 8000f66:	f000 fbba 	bl	80016de <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <RedBlinky+0x58>)
 8000f6e:	f000 fbb6 	bl	80016de <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2104      	movs	r1, #4
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <RedBlinky+0x58>)
 8000f78:	f000 fb99 	bl	80016ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <RedBlinky+0x58>)
 8000f82:	f000 fb94 	bl	80016ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <RedBlinky+0x58>)
 8000f8c:	f000 fb8f 	bl	80016ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <RedBlinky+0x58>)
 8000f96:	f000 fb8a 	bl	80016ae <HAL_GPIO_WritePin>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000d8 	.word	0x200000d8
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <YellowBlinky>:

void YellowBlinky() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	if (timer_flag[4] == 1) {
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <YellowBlinky+0x54>)
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d120      	bne.n	8000ff6 <YellowBlinky+0x4e>
		setTimer(4, 500);
 8000fb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f7ff fe75 	bl	8000ca8 <setTimer>

		HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <YellowBlinky+0x58>)
 8000fc2:	f000 fb8c 	bl	80016de <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <YellowBlinky+0x58>)
 8000fca:	f000 fb88 	bl	80016de <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	480b      	ldr	r0, [pc, #44]	; (8001000 <YellowBlinky+0x58>)
 8000fd4:	f000 fb6b 	bl	80016ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2108      	movs	r1, #8
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <YellowBlinky+0x58>)
 8000fde:	f000 fb66 	bl	80016ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <YellowBlinky+0x58>)
 8000fe8:	f000 fb61 	bl	80016ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <YellowBlinky+0x58>)
 8000ff2:	f000 fb5c 	bl	80016ae <HAL_GPIO_WritePin>
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000d8 	.word	0x200000d8
 8001000:	40010800 	.word	0x40010800

08001004 <GreenBlinky>:

void GreenBlinky() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	if (timer_flag[4] == 1) {
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <GreenBlinky+0x54>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d120      	bne.n	8001052 <GreenBlinky+0x4e>
	    setTimer(4, 500);
 8001010:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001014:	2004      	movs	r0, #4
 8001016:	f7ff fe47 	bl	8000ca8 <setTimer>

	    HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800101a:	2108      	movs	r1, #8
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <GreenBlinky+0x58>)
 800101e:	f000 fb5e 	bl	80016de <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <GreenBlinky+0x58>)
 8001026:	f000 fb5a 	bl	80016de <HAL_GPIO_TogglePin>

	    HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <GreenBlinky+0x58>)
 8001030:	f000 fb3d 	bl	80016ae <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <GreenBlinky+0x58>)
 800103a:	f000 fb38 	bl	80016ae <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <GreenBlinky+0x58>)
 8001044:	f000 fb33 	bl	80016ae <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2110      	movs	r1, #16
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <GreenBlinky+0x58>)
 800104e:	f000 fb2e 	bl	80016ae <HAL_GPIO_WritePin>
	}
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000d8 	.word	0x200000d8
 800105c:	40010800 	.word	0x40010800

08001060 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001060:	f7ff ff0e 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001066:	490c      	ldr	r1, [pc, #48]	; (8001098 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <LoopFillZerobss+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800107c:	4c09      	ldr	r4, [pc, #36]	; (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f001 faf9 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108e:	f7ff fcef 	bl	8000a70 <main>
  bx lr
 8001092:	4770      	bx	lr
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800109c:	08002744 	.word	0x08002744
  ldr r2, =_sbss
 80010a0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010a4:	20000154 	.word	0x20000154

080010a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_2_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x28>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x28>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f923 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fe52 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40022000 	.word	0x40022000

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f93b 	bl	8001372 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 f903 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000018 	.word	0x20000018
 8001130:	20000020 	.word	0x20000020
 8001134:	2000001c 	.word	0x2000001c

08001138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x1c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x20>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_IncTick+0x20>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000020 	.word	0x20000020
 8001158:	20000150 	.word	0x20000150

0800115c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <HAL_GetTick+0x10>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000150 	.word	0x20000150

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <__NVIC_EnableIRQ+0x34>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff90 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff2d 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff42 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff35 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b08b      	sub	sp, #44	; 0x2c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e148      	b.n	8001632 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8137 	bne.w	800162c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4aa3      	ldr	r2, [pc, #652]	; (8001650 <HAL_GPIO_Init+0x2c4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d05e      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013c8:	4aa1      	ldr	r2, [pc, #644]	; (8001650 <HAL_GPIO_Init+0x2c4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d875      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013ce:	4aa1      	ldr	r2, [pc, #644]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d058      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013d4:	4a9f      	ldr	r2, [pc, #636]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d86f      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013da:	4a9f      	ldr	r2, [pc, #636]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d052      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013e0:	4a9d      	ldr	r2, [pc, #628]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d869      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013e6:	4a9d      	ldr	r2, [pc, #628]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04c      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013ec:	4a9b      	ldr	r2, [pc, #620]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d863      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013f2:	4a9b      	ldr	r2, [pc, #620]	; (8001660 <HAL_GPIO_Init+0x2d4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d046      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013f8:	4a99      	ldr	r2, [pc, #612]	; (8001660 <HAL_GPIO_Init+0x2d4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d85d      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d82a      	bhi.n	8001458 <HAL_GPIO_Init+0xcc>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d859      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_GPIO_Init+0x80>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001487 	.word	0x08001487
 8001410:	08001461 	.word	0x08001461
 8001414:	08001473 	.word	0x08001473
 8001418:	080014b5 	.word	0x080014b5
 800141c:	080014bb 	.word	0x080014bb
 8001420:	080014bb 	.word	0x080014bb
 8001424:	080014bb 	.word	0x080014bb
 8001428:	080014bb 	.word	0x080014bb
 800142c:	080014bb 	.word	0x080014bb
 8001430:	080014bb 	.word	0x080014bb
 8001434:	080014bb 	.word	0x080014bb
 8001438:	080014bb 	.word	0x080014bb
 800143c:	080014bb 	.word	0x080014bb
 8001440:	080014bb 	.word	0x080014bb
 8001444:	080014bb 	.word	0x080014bb
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014bb 	.word	0x080014bb
 8001450:	08001469 	.word	0x08001469
 8001454:	0800147d 	.word	0x0800147d
 8001458:	4a82      	ldr	r2, [pc, #520]	; (8001664 <HAL_GPIO_Init+0x2d8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145e:	e02c      	b.n	80014ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e029      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e024      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	3308      	adds	r3, #8
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e01f      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	330c      	adds	r3, #12
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e01a      	b.n	80014bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148e:	2304      	movs	r3, #4
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e013      	b.n	80014bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	611a      	str	r2, [r3, #16]
          break;
 80014a6:	e009      	b.n	80014bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	615a      	str	r2, [r3, #20]
          break;
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x130>
          break;
 80014ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	; 0xff
 80014c0:	d801      	bhi.n	80014c6 <HAL_GPIO_Init+0x13a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e001      	b.n	80014ca <HAL_GPIO_Init+0x13e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d802      	bhi.n	80014d8 <HAL_GPIO_Init+0x14c>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x152>
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3b08      	subs	r3, #8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	210f      	movs	r1, #15
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8090 	beq.w	800162c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a55      	ldr	r2, [pc, #340]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001524:	4a51      	ldr	r2, [pc, #324]	; (800166c <HAL_GPIO_Init+0x2e0>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_GPIO_Init+0x2e4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1e0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a48      	ldr	r2, [pc, #288]	; (8001674 <HAL_GPIO_Init+0x2e8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1dc>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a47      	ldr	r2, [pc, #284]	; (8001678 <HAL_GPIO_Init+0x2ec>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1d8>
 8001560:	2302      	movs	r3, #2
 8001562:	e004      	b.n	800156e <HAL_GPIO_Init+0x1e2>
 8001564:	2303      	movs	r3, #3
 8001566:	e002      	b.n	800156e <HAL_GPIO_Init+0x1e2>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_GPIO_Init+0x1e2>
 800156c:	2300      	movs	r3, #0
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4093      	lsls	r3, r2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800157e:	493b      	ldr	r1, [pc, #236]	; (800166c <HAL_GPIO_Init+0x2e0>)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_GPIO_Init+0x2f0>)
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_GPIO_Init+0x2f0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4933      	ldr	r1, [pc, #204]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	492d      	ldr	r1, [pc, #180]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4929      	ldr	r1, [pc, #164]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015d8:	4013      	ands	r3, r2
 80015da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4923      	ldr	r1, [pc, #140]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_GPIO_Init+0x2f0>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491f      	ldr	r1, [pc, #124]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001600:	4013      	ands	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4919      	ldr	r1, [pc, #100]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	4915      	ldr	r1, [pc, #84]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001628:	4013      	ands	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3301      	adds	r3, #1
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f aeaf 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	372c      	adds	r7, #44	; 0x2c
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	10320000 	.word	0x10320000
 8001654:	10310000 	.word	0x10310000
 8001658:	10220000 	.word	0x10220000
 800165c:	10210000 	.word	0x10210000
 8001660:	10120000 	.word	0x10120000
 8001664:	10110000 	.word	0x10110000
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	40010800 	.word	0x40010800
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40011000 	.word	0x40011000
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]
 80016ba:	4613      	mov	r3, r2
 80016bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016be:	787b      	ldrb	r3, [r7, #1]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	041a      	lsls	r2, r3, #16
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	041a      	lsls	r2, r3, #16
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	400b      	ands	r3, r1
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	611a      	str	r2, [r3, #16]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e26c      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8087 	beq.w	800183e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001730:	4b92      	ldr	r3, [pc, #584]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	d00c      	beq.n	8001756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173c:	4b8f      	ldr	r3, [pc, #572]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	d112      	bne.n	800176e <HAL_RCC_OscConfig+0x5e>
 8001748:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d10b      	bne.n	800176e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d06c      	beq.n	800183c <HAL_RCC_OscConfig+0x12c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d168      	bne.n	800183c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e246      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x76>
 8001778:	4b80      	ldr	r3, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a7f      	ldr	r2, [pc, #508]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e02e      	b.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x98>
 800178e:	4b7b      	ldr	r3, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7a      	ldr	r2, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b78      	ldr	r3, [pc, #480]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a77      	ldr	r2, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e01d      	b.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0xbc>
 80017b2:	4b72      	ldr	r3, [pc, #456]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a71      	ldr	r2, [pc, #452]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0xd4>
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a67      	ldr	r2, [pc, #412]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fcb6 	bl	800115c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fcb2 	bl	800115c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1fa      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b5d      	ldr	r3, [pc, #372]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0xe4>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fca2 	bl	800115c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc9e 	bl	800115c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1e6      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x10c>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d063      	beq.n	8001912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184a:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d11c      	bne.n	800189c <HAL_RCC_OscConfig+0x18c>
 8001862:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x176>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e1ba      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4939      	ldr	r1, [pc, #228]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e03a      	b.n	8001912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fc57 	bl	800115c <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fc53 	bl	800115c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e19b      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4927      	ldr	r1, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]
 80018e4:	e015      	b.n	8001912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x270>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fc36 	bl	800115c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fc32 	bl	800115c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e17a      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d03a      	beq.n	8001994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d019      	beq.n	800195a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fc16 	bl	800115c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fc12 	bl	800115c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e15a      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_RCC_OscConfig+0x26c>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fa9a 	bl	8001e8c <RCC_Delay>
 8001958:	e01c      	b.n	8001994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_RCC_OscConfig+0x274>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fbfc 	bl	800115c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fbf8 	bl	800115c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d908      	bls.n	8001988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e140      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	42420000 	.word	0x42420000
 8001984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e9      	bne.n	8001968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80a6 	beq.w	8001aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a6:	4b97      	ldr	r3, [pc, #604]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10d      	bne.n	80019ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a93      	ldr	r2, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]
 80019be:	4b91      	ldr	r3, [pc, #580]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a8a      	ldr	r2, [pc, #552]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fbb9 	bl	800115c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff fbb5 	bl	800115c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0fd      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x312>
 8001a14:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	e02d      	b.n	8001a7e <HAL_RCC_OscConfig+0x36e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x334>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a72      	ldr	r2, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	e01c      	b.n	8001a7e <HAL_RCC_OscConfig+0x36e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d10c      	bne.n	8001a66 <HAL_RCC_OscConfig+0x356>
 8001a4c:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a6c      	ldr	r2, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6213      	str	r3, [r2, #32]
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a69      	ldr	r2, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	e00b      	b.n	8001a7e <HAL_RCC_OscConfig+0x36e>
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4a66      	ldr	r2, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6213      	str	r3, [r2, #32]
 8001a72:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d015      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fb69 	bl	800115c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fb65 	bl	800115c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0ab      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa4:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ee      	beq.n	8001a8e <HAL_RCC_OscConfig+0x37e>
 8001ab0:	e014      	b.n	8001adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb53 	bl	800115c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fb4f 	bl	800115c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e095      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ee      	bne.n	8001aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d105      	bne.n	8001aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae2:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8081 	beq.w	8001bfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d061      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d146      	bne.n	8001b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <HAL_RCC_OscConfig+0x4fc>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb23 	bl	800115c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb1f 	bl	800115c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e067      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	492d      	ldr	r1, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a19      	ldr	r1, [r3, #32]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	430b      	orrs	r3, r1
 8001b66:	4927      	ldr	r1, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x4fc>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff faf3 	bl	800115c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff faef 	bl	800115c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e037      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46a>
 8001b98:	e02f      	b.n	8001bfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <HAL_RCC_OscConfig+0x4fc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fadc 	bl	800115c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff fad8 	bl	800115c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e020      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x498>
 8001bc6:	e018      	b.n	8001bfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	42420060 	.word	0x42420060

08001c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0d0      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d910      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4965      	ldr	r1, [pc, #404]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0b8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	494d      	ldr	r1, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d040      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e07f      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e073      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e06b      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff fa2c 	bl	800115c <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff fa28 	bl	800115c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e053      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d210      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4922      	ldr	r1, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e032      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9e:	f000 f821 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490a      	ldr	r1, [pc, #40]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	fa22 f303 	lsr.w	r3, r2, r3
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1cc>)
 8001db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f98a 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08002718 	.word	0x08002718
 8001ddc:	20000018 	.word	0x20000018
 8001de0:	2000001c 	.word	0x2000001c

08001de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d002      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x30>
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d003      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x36>
 8001e12:	e027      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e16:	613b      	str	r3, [r7, #16]
      break;
 8001e18:	e027      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0c9b      	lsrs	r3, r3, #18
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0c5b      	lsrs	r3, r3, #17
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
 8001e40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	fb02 f203 	mul.w	r2, r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e004      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	613b      	str	r3, [r7, #16]
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e66:	613b      	str	r3, [r7, #16]
      break;
 8001e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6a:	693b      	ldr	r3, [r7, #16]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	007a1200 	.word	0x007a1200
 8001e80:	08002728 	.word	0x08002728
 8001e84:	08002738 	.word	0x08002738
 8001e88:	003d0900 	.word	0x003d0900

08001e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <RCC_Delay+0x34>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <RCC_Delay+0x38>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0a5b      	lsrs	r3, r3, #9
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ea8:	bf00      	nop
  }
  while (Delay --);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	60fa      	str	r2, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f9      	bne.n	8001ea8 <RCC_Delay+0x1c>
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	10624dd3 	.word	0x10624dd3

08001ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e041      	b.n	8001f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ff70 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3304      	adds	r3, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f000 fa56 	bl	80023b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d001      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e035      	b.n	8001fec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_TIM_Base_Start_IT+0x90>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_TIM_Base_Start_IT+0x4e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d004      	beq.n	8001fb6 <HAL_TIM_Base_Start_IT+0x4e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_TIM_Base_Start_IT+0x94>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d111      	bne.n	8001fda <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d010      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	e007      	b.n	8001fea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40000400 	.word	0x40000400

08002000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d020      	beq.n	8002064 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0202 	mvn.w	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f998 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f98b 	bl	800236e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f99a 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d020      	beq.n	80020b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0204 	mvn.w	r2, #4
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f972 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f965 	bl	800236e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f974 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d020      	beq.n	80020fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0208 	mvn.w	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f94c 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f93f 	bl	800236e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f94e 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0210 	mvn.w	r2, #16
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2208      	movs	r2, #8
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f926 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f919 	bl	800236e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f928 	bl	8002392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0201 	mvn.w	r2, #1
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fd8c 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa6f 	bl	800266e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8f8 	bl	80023a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0220 	mvn.w	r2, #32
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa42 	bl	800265c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_TIM_ConfigClockSource+0x1c>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e0b4      	b.n	8002366 <HAL_TIM_ConfigClockSource+0x186>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800221a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002234:	d03e      	beq.n	80022b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223a:	f200 8087 	bhi.w	800234c <HAL_TIM_ConfigClockSource+0x16c>
 800223e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002242:	f000 8086 	beq.w	8002352 <HAL_TIM_ConfigClockSource+0x172>
 8002246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224a:	d87f      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 800224c:	2b70      	cmp	r3, #112	; 0x70
 800224e:	d01a      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0xa6>
 8002250:	2b70      	cmp	r3, #112	; 0x70
 8002252:	d87b      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 8002254:	2b60      	cmp	r3, #96	; 0x60
 8002256:	d050      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0x11a>
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d877      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 800225c:	2b50      	cmp	r3, #80	; 0x50
 800225e:	d03c      	beq.n	80022da <HAL_TIM_ConfigClockSource+0xfa>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d873      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d058      	beq.n	800231a <HAL_TIM_ConfigClockSource+0x13a>
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d86f      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 800226c:	2b30      	cmp	r3, #48	; 0x30
 800226e:	d064      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x15a>
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d86b      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 8002274:	2b20      	cmp	r3, #32
 8002276:	d060      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x15a>
 8002278:	2b20      	cmp	r3, #32
 800227a:	d867      	bhi.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
 800227c:	2b00      	cmp	r3, #0
 800227e:	d05c      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x15a>
 8002280:	2b10      	cmp	r3, #16
 8002282:	d05a      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x15a>
 8002284:	e062      	b.n	800234c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f000 f96a 	bl	800256e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	609a      	str	r2, [r3, #8]
      break;
 80022b2:	e04f      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f000 f953 	bl	800256e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d6:	609a      	str	r2, [r3, #8]
      break;
 80022d8:	e03c      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f000 f8ca 	bl	8002480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2150      	movs	r1, #80	; 0x50
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f921 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 80022f8:	e02c      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6859      	ldr	r1, [r3, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	461a      	mov	r2, r3
 8002308:	f000 f8e8 	bl	80024dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2160      	movs	r1, #96	; 0x60
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f911 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002318:	e01c      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	461a      	mov	r2, r3
 8002328:	f000 f8aa 	bl	8002480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f901 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002338:	e00c      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f000 f8f8 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 800234a:	e003      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      break;
 8002350:	e000      	b.n	8002354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <TIM_Base_SetConfig+0x28>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d6:	d003      	beq.n	80023e0 <TIM_Base_SetConfig+0x28>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a28      	ldr	r2, [pc, #160]	; (800247c <TIM_Base_SetConfig+0xc4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d108      	bne.n	80023f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a20      	ldr	r2, [pc, #128]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0x52>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0x52>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <TIM_Base_SetConfig+0xc4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <TIM_Base_SetConfig+0xc0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d103      	bne.n	8002450 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f023 0201 	bic.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
  }
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400

08002480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	f023 0201 	bic.w	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 030a 	bic.w	r3, r3, #10
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 0210 	bic.w	r2, r3, #16
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	031b      	lsls	r3, r3, #12
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002518:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	621a      	str	r2, [r3, #32]
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	f043 0307 	orr.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002588:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	021a      	lsls	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	431a      	orrs	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4313      	orrs	r3, r2
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	609a      	str	r2, [r3, #8]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e041      	b.n	8002648 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d004      	beq.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10c      	bne.n	8002636 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40012c00 	.word	0x40012c00
 8002658:	40000400 	.word	0x40000400

0800265c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	f000 f822 	bl	80026d8 <_init>
 8002694:	2600      	movs	r6, #0
 8002696:	4d0a      	ldr	r5, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	0800273c 	.word	0x0800273c
 80026bc:	0800273c 	.word	0x0800273c
 80026c0:	0800273c 	.word	0x0800273c
 80026c4:	08002740 	.word	0x08002740

080026c8 <memset>:
 80026c8:	4603      	mov	r3, r0
 80026ca:	4402      	add	r2, r0
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	f803 1b01 	strb.w	r1, [r3], #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <_init>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr

080026e4 <_fini>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr
